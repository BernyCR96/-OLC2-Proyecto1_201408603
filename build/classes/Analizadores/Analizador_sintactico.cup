/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------------------> Importaciones 
//-------------------> Paquetes 
package Analizadores;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.lang.Math;
//-------------------> Codigo para el parser, variables, metodos
parser code
{:  
    
    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);       
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }   
  
    public void escribir_fichero(String texto, String nombre) throws IOException {
        String ruta = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";
        File archivo = new File(ruta);
        BufferedWriter bw;
        if (archivo.createNewFile()) {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        }
        bw.close();

    }
    public int contador = 0;

    public void grafico(String nombre) {
        try {

            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            String fileInputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";

            String fileOutputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".jpg";
            String tParam = "-Tjpg";
            String tOParam = "-o";
            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;
            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }  

    public void semantic(String msg, Object obj) {}

:}


//-------------------> Codigo para las acciones gramaticales
action code
{:




:}  


/*----------------------------------------------------------------------------
--------------------- 2da. Area: Declaraciones
----------------------------------------------------------------------------*/

//-------------------> Declaración de Terminales
//-------------------> se les puede indicar x tipo
//-------------------> numero es string porque me interesa el valor lexico que trae
terminal p_coma, menor, mayor, igual,coma;
terminal pr_chtml, pr_encabezado, pr_cjs, pr_ccss, pr_titulo, pr_cuerpo, pr_panel, pr_texto,pr_fondo;
terminal pr_caja_texto, pr_imagen, pr_boton, pr_enlace, pr_tabla, pr_fil_t, pr_cb, pr_ct, pr_valor;
terminal pr_texto_a, pr_caja, pr_opcion, pr_spinner, pr_salto, pr_click, pr_ruta, pr_id;
terminal pr_grupo, pr_alto, pr_ancho, pr_alineado, pr_atri_ccss, ptodo;
terminal pr_finchtml, pr_finencabezado, pr_fincjs, pr_finccss, pr_fintitulo, pr_fincuerpo, pr_finpanel, pr_fintexto;
terminal pr_fincaja_texto, pr_finimagen, pr_finboton, pr_finenlace, pr_fintabla, pr_finfil_t, pr_fincb, pr_finct;
terminal pr_fintexto_a, pr_fincaja, pr_finopcion, pr_finspinner, pr_parC,pr_parA;

terminal String numero, saltos, identificador,texto, cadena,cadena2, otro_simb,simb;


//-------------------> Declaración de No Terminales
//-------------------> se les puede indicar x tipo
non terminal NodoA INICIO, H ,EN, CONT_EN, CONT_C, REP, CU, L_AT, L_AT2, L_ATRIBUTOS, L_ATRIBUTOS2;
non terminal NodoA CU_FIL, CU_T, CONT_FIL,CUERPO,CONTENIDO,ENCABEZADO, NUEVO, CAJA_OP,CONT_COL;
non terminal NodoA E ,L_PAR,CUERPO_TABLA;
non terminal String L_ID,LISTA_ID;


//-------------------> Indicar precedencia(de menor a mayor) y asociatividad
//-------------------> Generalmente se usa si la gramatica es Ambigua
//precedence left mas, menos;
//precedence left por, div;




//-------------------> No Terminal inicial
start with INICIO;

INICIO ::= H:val{:
        RESULT = val;
        System.out.println(RESULT.getNombre() + "-----------");
    :};

H ::= menor pr_chtml mayor CONTENIDO:val menor pr_finchtml mayor {:
        RESULT = new NodoA("H");
        RESULT.getListaDehojas().add(val);
        
:};

CONTENIDO ::= ENCABEZADO:val CUERPO:cuerpo{:
         RESULT = new NodoA("CONTENIDO");
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cuerpo);
        
        :};
    

ENCABEZADO ::= menor pr_encabezado mayor CONT_EN:val menor pr_finencabezado mayor{:
            RESULT = new NodoA("ENCABEZADO");
        RESULT.getListaDehojas().add(val);
        
        :};
    
CUERPO ::= menor pr_cuerpo mayor CONT_C:val menor pr_fincuerpo mayor {:
        RESULT = new NodoA("CUERPO");
        RESULT.getListaDehojas().add(val);
        
        :}

        | menor pr_cuerpo pr_fondo igual E:val2 p_coma mayor CONT_C:val  menor pr_fincuerpo mayor {:
        RESULT = new NodoA("CUERPO");
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(val2);
        
        :};

CONT_EN ::= CONT_EN:val REP:nuevo{:
        RESULT = val;
        RESULT.getListaDehojas().add(nuevo);
        
        :}

    | REP:val{:
        RESULT = new NodoA("CONT_EN");
        RESULT.getListaDehojas().add(val);
        
        :};

REP ::= menor pr_titulo cadena2:val pr_fintitulo mayor {:
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("TITULO"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    
    :}
    | menor pr_ccss pr_ruta igual cadena p_coma cadena2:val pr_finccss mayor {:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CCSS"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    :}
    | menor pr_cjs pr_ruta igual cadena p_coma cadena2:val pr_fincjs mayor {:
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("CJS"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    :}
    
    | menor pr_ccss pr_ruta igual cadena p_coma mayor  menor pr_finccss mayor {:
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("PR_CCSS"));
        
        
    :}
    |menor pr_titulo mayor  menor pr_fintitulo mayor {:
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("TITULO"));
        
        
    :}
    | menor pr_cjs pr_ruta igual cadena p_coma mayor  menor pr_fincjs mayor {:
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("PR_CJS"));
       
        
    :};

    
CONT_C ::= CONT_C:val CU:valor{:
        RESULT = val;
        RESULT.getListaDehojas().add(valor);
        
        :}
    | CU:val{:
        RESULT = new NodoA("CONT_C");
        RESULT.getListaDehojas().add(val);
        
        :};

CU ::= menor pr_panel L_AT:val p_coma mayor CONT_C:valor menor pr_finpanel mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(valor);
        
    :}
    |menor pr_panel mayor CONT_C:val menor pr_finpanel mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        RESULT.getListaDehojas().add(val);
        
    :}
    |menor pr_panel L_AT:val p_coma mayor  menor pr_finpanel mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        RESULT.getListaDehojas().add(val);
        
    :}  
    |menor pr_panel mayor  menor pr_finpanel mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        
    :}

    |menor pr_texto L_AT:val p_coma cadena2:id pr_fintexto mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    :}

    |menor pr_texto L_AT:val p_coma mayor menor pr_fintexto mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        RESULT.getListaDehojas().add(val);
        
    :}
    |menor pr_texto mayor menor pr_fintexto mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        
        
    :}

    |menor pr_texto cadena2:id pr_fintexto mayor{:
        RESULT = new NodoA("CU");
        
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    :}

    |menor pr_caja_texto L_AT:val p_coma cadena2:id pr_fincaja_texto mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CAJA_TEXTO"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    :}

    |menor pr_caja_texto L_AT:val p_coma mayor menor pr_fincaja_texto mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CAJA_TEXTO"));
        RESULT.getListaDehojas().add(val);
        
        
    :}
    |menor pr_caja_texto cadena2:val pr_fincaja_texto mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CAJA_TEXTO"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    :}
    |menor pr_caja_texto mayor menor pr_fincaja_texto mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CAJA_TEXTO"));
    :}

    |menor pr_imagen L_AT2:val p_coma cadena2:id pr_finimagen mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    :}
    
     |menor pr_imagen L_AT2:val p_coma mayor menor pr_finimagen mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(val);
        
    :}
    |menor pr_imagen cadena2:val pr_finimagen mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    :}

    |menor pr_imagen mayor menor pr_finimagen mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        //agregar la imagen de no se encontro imagen
        
        
    :}

    |menor pr_boton L_AT2:val  p_coma cadena2:id pr_finboton mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    :}

    |menor pr_boton L_AT2:val  p_coma mayor menor pr_finboton mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(val);
        //agregar el nombre por defecto
        
    :}

    |menor pr_boton cadena2:val pr_finboton mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
    :}
    
    |menor pr_boton mayor menor pr_finboton mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA("valor por defecto"));
    :}

    
    |menor pr_enlace pr_ruta igual cadena:cad p_coma cadena2:val pr_finenlace mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("ENLACE" + cad.substring(1, cad.length()-1)));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
       
    :}
    |menor pr_enlace pr_ruta igual cadena:val p_coma mayor menor pr_finenlace mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("ENLACE "));
        //agregar el nombre de la ruta ya que no tiene otro nombre

    :}

    |menor pr_tabla L_AT:val p_coma mayor CU_T:cont menor pr_fintabla mayor{:
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cont);

    :}
    |menor pr_tabla mayor CU_T:val menor pr_fintabla mayor{:
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        RESULT.getListaDehojas().add(val);

    :}

    |menor pr_tabla mayor  menor pr_fintabla mayor{:
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        

    :}
    |menor pr_tabla cadena2:val pr_fintabla mayor{:
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        

    :}

    |menor pr_texto_a L_AT:val p_coma cadena2:cont pr_fintexto_a mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(cont.substring(1, cont.length())));

    :}

    |menor pr_texto_a L_AT:val p_coma mayor menor pr_fintexto_a mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
        RESULT.getListaDehojas().add(val);
        

    :}

    |menor pr_texto_a cadena2:val pr_fintexto_a mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));

    :}

     |menor pr_texto_a mayor menor pr_fintexto_a mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
    :}

     |menor pr_caja L_AT2:val p_coma mayor CAJA_OP:cont menor pr_fincaja mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("Caja"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cont);

    :}
    |menor pr_caja mayor CAJA_OP:val menor pr_fincaja mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("Caja"));
        RESULT.getListaDehojas().add(val);

         
    :}

    |menor pr_spinner L_AT:val p_coma cadena2:n pr_finspinner mayor{:
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(val);
         RESULT.getListaDehojas().add(new NodoA("salto "+ n.substring(1, n.length())));
         
    :}

    |menor pr_spinner L_AT:val p_coma mayor menor pr_finspinner mayor{:
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(val);
         RESULT.getListaDehojas().add(new NodoA("Spinner vacio"));
         
    :}

    |menor pr_spinner cadena2:n pr_finspinner mayor{:
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(new NodoA("Spinner " + n));
         
    :}
    |menor pr_spinner mayor  menor pr_finspinner mayor{:
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(new NodoA("Spinner "));
         
    :}

    |menor pr_salto mayor {:
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(new NodoA("salto"));
         

        :};

CAJA_OP ::= CAJA_OP:val NUEVO:otro{:
            RESULT = val;
            RESULT.getListaDehojas().add(otro);
        :}
        
        |NUEVO:val {:
            RESULT = val;
        :};

NUEVO ::= menor pr_opcion pr_valor igual E:val p_coma mayor  menor pr_finopcion mayor{:
            RESULT = new NodoA("NUEVO");
            RESULT.getListaDehojas().add(new NodoA("opcion"));
            RESULT.getListaDehojas().add(val);
            
        :}
          |menor pr_opcion pr_valor igual E:val p_coma cadena2:id pr_finopcion mayor{:
            RESULT = new NodoA("NUEVO");
            RESULT.getListaDehojas().add(new NodoA("opcion"));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));

        
        :};
    

L_AT ::= L_AT:val p_coma L_ATRIBUTOS:hijo{:
        RESULT = val;
        RESULT.getListaDehojas().add(new NodoA(";"));
        RESULT.getListaDehojas().add(hijo);
        
        :}
        |L_ATRIBUTOS:val {:
            RESULT = new NodoA("L_AT");
            RESULT.getListaDehojas().add(val);
        
        :};

L_AT2 ::= L_AT2:val p_coma L_ATRIBUTOS2:hijo{:
            RESULT = val;
            RESULT.getListaDehojas().add(new NodoA(";"));
            RESULT.getListaDehojas().add(hijo);
        :}
        |L_ATRIBUTOS2:val {:
            RESULT = new NodoA("L_AT2");
            RESULT.getListaDehojas().add(val);
        :};

L_ATRIBUTOS ::= pr_click igual E:val {:
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("Click"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
           

            

            :}



            | pr_id:id igual:asig E:val {:
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("ID"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            :}

            | pr_grupo:grupo igual:asig E:val {:
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("grupo"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            :}


            | pr_alto igual E:val {:
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("alto"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            :}

            | pr_ancho:ancho igual:asig E:val {:
            
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("Ancho"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            :}

            | pr_alineado:ali igual:asig E:val {:
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("Alineado"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            :};
            

L_ATRIBUTOS2 ::= pr_click igual E:val {:
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Click"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new NodoA("("));
            RESULT.getListaDehojas().add(new NodoA(")"));

            

            :}

          

            | pr_ruta:ruta igual:asig E:val {:
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Ruta"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            

            :}
            


            | pr_id:id igual:asig E:val {:
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("ID"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            :}

            | pr_grupo:grupo igual:asig E:val {:
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("grupo"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            :}


            | pr_alto igual E:val {:
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("alto"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            :}

            | pr_ancho:ancho igual:asig E:val {:
            
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Ancho"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            :}

            | pr_alineado:ali igual:asig E:val {:
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Alineado"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            :};
            
CU_T ::= CU_T:val CUERPO_TABLA:cuerpo{:
        RESULT = val;
        RESULT.getListaDehojas().add(cuerpo);
        :}
        

        | CUERPO_TABLA:val{:
        
        RESULT = new NodoA("CU_T");
        RESULT.getListaDehojas().add(val);
        :};

CUERPO_TABLA ::= menor pr_fil_t L_AT:atr p_coma mayor CU_FIL:val menor pr_finfil_t mayor {:
            RESULT = new NodoA("CUERPO_TABLA");
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(val);
            

        :}


        |menor pr_fil_t mayor CU_FIL:val menor pr_finfil_t mayor {:
            RESULT = new NodoA("CUERPO_TABLA");
            RESULT.getListaDehojas().add(val);
        :}

         |menor pr_fil_t mayor menor pr_finfil_t mayor {:
            RESULT = new NodoA("CUERPO_TABLA");
            
        :} ;

CU_FIL ::= CU_FIL:val CONT_FIL:id{:
            RESULT = val;
            RESULT.getListaDehojas().add(id);
        :}
        
        |CONT_FIL{:
        RESULT = new NodoA("CU_FIL");
        :};

CONT_FIL ::= menor pr_cb L_AT:atr p_coma mayor CONT_COL:cont  menor pr_fincb mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(cont);
            :}

            |menor pr_cb L_AT:atr p_coma cadena2:cont pr_fincb mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(new NodoA(cont.substring(1, cont.length())));
            :}
            
            |menor pr_cb L_AT:atr p_coma mayor menor pr_fincb mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(atr);
            :}

            |menor pr_cb mayor CONT_COL:cont  menor pr_fincb mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(cont);
            :}

            |menor pr_cb cadena2:cont pr_fincb mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(new NodoA(cont.substring(1, cont.length())));
            :}

            |menor pr_cb mayor  menor pr_fincb mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            
            :}
            
            |menor pr_ct mayor CONT_COL:cont menor pr_finct mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(cont);
            :}

            |menor pr_ct mayor menor pr_finct mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            :}

            |menor pr_ct cadena2:cont pr_finct mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(new NodoA(cont.substring(1, cont.length())));
            :}
            
            |menor pr_ct L_AT:atr p_coma cadena2:cont pr_finct mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(new NodoA(cont.substring(1, cont.length())));
            :}

            |menor pr_ct L_AT:atr p_coma mayor menor pr_finct mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(atr);
            :}
            
            |menor pr_ct L_AT:atr p_coma mayor CONT_COL:cont menor pr_finct mayor{:
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(cont);
            RESULT.getListaDehojas().add(atr);
            :};

CONT_COL ::= menor pr_imagen L_AT2:val p_coma cadena2:id pr_finimagen mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    :}
    
     |menor pr_imagen L_AT2:val p_coma mayor menor pr_finimagen mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(val);
        
    :}
    |menor pr_imagen cadena2:val pr_finimagen mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    :}

    |menor pr_imagen mayor menor pr_finimagen mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        //agregar la imagen de no se encontro imagen
        
        
    :}

    |menor pr_boton L_AT2:val  p_coma cadena2:id pr_finboton mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    :}

    |menor pr_boton L_AT2:val  p_coma mayor menor pr_finboton mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(val);
        //agregar el nombre por defecto
        
    :}

    |menor pr_boton cadena2:val pr_finboton mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
    :}
    
    |menor pr_boton mayor menor pr_finboton mayor{:
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA("valor por defecto"));
    :};


L_ID ::= L_ID:val LISTA_ID:id{:
    
        RESULT = val + " " + id;
        
    :}

    |LISTA_ID:val{:
        RESULT = val; 
    :};

LISTA_ID ::= numero:num{:
        RESULT = num;
        :}

    | otro_simb:si {:
        RESULT = si;
       
    :}

    | identificador:id{:
        RESULT = id;
    :};
   
        
E ::= cadena:cad 
    {: 
    RESULT = new NodoA("E");
    
    RESULT.getListaDehojas().add(new NodoA(cad.substring(1, cad.length()-1)));
    :}
    | numero:num{:
    RESULT = new NodoA("E");
    RESULT.getListaDehojas().add(new NodoA(num));
    :}
    | identificador:id {:
    RESULT = new NodoA("E");
    RESULT.getListaDehojas().add(new NodoA(id));
    
    :};

L_PAR ::= L_PAR:val coma identificador:id{:
    RESULT = val;
    RESULT.getListaDehojas().add(new NodoA(id));
    
    :}

    | identificador:id{:
    RESULT = new NodoA("L_PARAMETROS");
    RESULT.getListaDehojas().add(new NodoA(id));
    :};