
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 21 16:57:51 CST 2018
//----------------------------------------------------

package Analizadores_CCSS;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.lang.Math;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 21 16:57:51 CST 2018
  */
public class SintacticoCCSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoCCSS() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoCCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\004\005" +
    "\000\002\005\004\000\002\005\003\000\002\006\010\000" +
    "\002\006\010\000\002\007\004\000\002\007\003\000\002" +
    "\010\006\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\010\006\000\002\010\006\000\002\010\012" +
    "\000\002\010\006\000\002\010\014\000\002\010\005\000" +
    "\002\010\006\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\013\005\000\002\013" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\012\005\000" +
    "\002\012\003\000\002\016\003\000\002\016\003\000\002" +
    "\015\003\000\002\015\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\054\006\001\002\000\006\002\ufffe\054" +
    "\ufffe\001\002\000\006\002\000\054\006\001\002\000\004" +
    "\004\011\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\010\005\013\045\015\046\012\001\002" +
    "\000\004\006\151\001\002\000\006\002\ufffc\054\ufffc\001" +
    "\002\000\010\005\ufffa\045\ufffa\046\ufffa\001\002\000\004" +
    "\006\021\001\002\000\010\005\017\045\015\046\012\001" +
    "\002\000\006\002\ufffd\054\ufffd\001\002\000\010\005\ufffb" +
    "\045\ufffb\046\ufffb\001\002\000\004\054\022\001\002\000" +
    "\004\007\023\001\002\000\004\010\024\001\002\000\030" +
    "\017\034\020\031\025\030\035\035\036\033\037\026\040" +
    "\037\041\036\042\025\043\027\044\040\001\002\000\004" +
    "\011\140\001\002\000\004\011\135\001\002\000\004\011" +
    "\133\001\002\000\004\011\120\001\002\000\004\011\112" +
    "\001\002\000\036\005\ufff9\017\034\020\031\025\030\035" +
    "\035\036\033\037\026\040\037\041\036\042\025\043\027" +
    "\044\040\045\ufff9\046\ufff9\001\002\000\004\011\075\001" +
    "\002\000\004\011\066\001\002\000\004\011\063\001\002" +
    "\000\004\011\060\001\002\000\004\011\045\001\002\000" +
    "\004\011\042\001\002\000\036\005\ufff6\017\ufff6\020\ufff6" +
    "\025\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\001\002\000\004" +
    "\056\043\001\002\000\004\010\044\001\002\000\036\005" +
    "\uffeb\017\uffeb\020\uffeb\025\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\001\002\000\004\004\046\001\002\000\006\027\047" +
    "\030\050\001\002\000\040\005\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\025\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002\000" +
    "\040\005\uffda\016\uffda\017\uffda\020\uffda\025\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\001\002\000\004\016\052\001\002" +
    "\000\006\047\054\050\055\001\002\000\004\005\056\001" +
    "\002\000\004\005\uffdd\001\002\000\004\005\uffdc\001\002" +
    "\000\004\010\057\001\002\000\036\005\uffef\017\uffef\020" +
    "\uffef\025\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\001\002\000" +
    "\004\056\061\001\002\000\004\010\062\001\002\000\036" +
    "\005\uffee\017\uffee\020\uffee\025\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\001\002\000\004\056\064\001\002\000\004\010" +
    "\065\001\002\000\036\005\ufff2\017\ufff2\020\ufff2\025\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\001\002\000\012\021\073" +
    "\022\071\023\070\024\067\001\002\000\004\010\uffea\001" +
    "\002\000\004\010\uffe9\001\002\000\004\010\uffe7\001\002" +
    "\000\004\010\074\001\002\000\004\010\uffe8\001\002\000" +
    "\036\005\ufff5\017\ufff5\020\ufff5\025\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\046\ufff5\001\002\000\004\052\076\001\002\000\016" +
    "\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\001" +
    "\002\000\014\010\101\012\100\013\102\014\104\015\103" +
    "\001\002\000\004\052\076\001\002\000\036\005\ufff1\017" +
    "\ufff1\020\ufff1\025\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\001" +
    "\002\000\004\052\076\001\002\000\004\052\076\001\002" +
    "\000\004\052\076\001\002\000\016\010\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\001\002\000\016\010\uffd8" +
    "\012\100\013\uffd8\014\104\015\uffd8\016\uffd8\001\002\000" +
    "\016\010\uffd9\012\100\013\uffd9\014\104\015\uffd9\016\uffd9" +
    "\001\002\000\016\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\001\002\000\036\005\ufff7\017\ufff7\020\ufff7" +
    "\025\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\001\002\000\004" +
    "\056\113\001\002\000\006\010\uffde\013\uffde\001\002\000" +
    "\006\010\115\013\116\001\002\000\036\005\ufff4\017\ufff4" +
    "\020\ufff4\025\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041" +
    "\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\001\002" +
    "\000\004\056\117\001\002\000\006\010\uffdf\013\uffdf\001" +
    "\002\000\014\026\124\031\123\032\122\033\127\034\126" +
    "\001\002\000\006\010\uffe5\016\uffe5\001\002\000\006\010" +
    "\uffe1\016\uffe1\001\002\000\006\010\uffe4\016\uffe4\001\002" +
    "\000\006\010\uffe3\016\uffe3\001\002\000\006\010\130\016" +
    "\131\001\002\000\006\010\uffe0\016\uffe0\001\002\000\006" +
    "\010\uffe2\016\uffe2\001\002\000\036\005\ufff3\017\ufff3\020" +
    "\ufff3\025\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\001\002\000" +
    "\014\026\124\031\123\032\122\033\127\034\126\001\002" +
    "\000\006\010\uffe6\016\uffe6\001\002\000\006\027\047\030" +
    "\050\001\002\000\036\005\uffec\017\uffec\020\uffec\025\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\045\uffec\046\uffec\001\002\000\004\056\136" +
    "\001\002\000\004\010\137\001\002\000\036\005\ufff0\017" +
    "\ufff0\020\ufff0\025\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\001" +
    "\002\000\004\004\141\001\002\000\004\052\076\001\002" +
    "\000\014\012\100\013\102\014\104\015\103\016\143\001" +
    "\002\000\004\056\144\001\002\000\004\016\145\001\002" +
    "\000\006\027\047\030\050\001\002\000\004\005\147\001" +
    "\002\000\004\010\150\001\002\000\036\005\uffed\017\uffed" +
    "\020\uffed\025\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\001\002" +
    "\000\004\054\152\001\002\000\004\007\153\001\002\000" +
    "\004\010\154\001\002\000\030\017\034\020\031\025\030" +
    "\035\035\036\033\037\026\040\037\041\036\042\025\043" +
    "\027\044\040\001\002\000\036\005\ufff8\017\034\020\031" +
    "\025\030\035\035\036\033\037\026\040\037\041\036\042" +
    "\025\043\027\044\040\045\ufff8\046\ufff8\001\002\000\006" +
    "\002\uffff\054\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\010\002\006\003\004\004\003\001\001\000" +
    "\002\001\001\000\004\004\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\015\006" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\031\010\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\107\001\001\000\002\001\001\000\004" +
    "\014\106\001\001\000\004\014\105\001\001\000\004\014" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\124\020\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\131\001\001\000\002\001\001\000\004\015\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\154\010\040\001\001\000" +
    "\004\010\110\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    
    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);       
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }   
  
    public void escribir_fichero(String texto, String nombre) throws IOException {
        String ruta = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";
        File archivo = new File(ruta);
        BufferedWriter bw;
        if (archivo.createNewFile()) {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        }
        bw.close();

    }
    public int contador = 0;

    public void grafico(String nombre) {
        try {

            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            String fileInputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";

            String fileOutputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".jpg";
            String tParam = "-Tjpg";
            String tOParam = "-o";
            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;
            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }  

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoCCSS$actions {







  private final SintacticoCCSS parser;

  /** Constructor */
  CUP$SintacticoCCSS$actions(SintacticoCCSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoCCSS$do_action(
    int                        CUP$SintacticoCCSS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCCSS$parser,
    java.util.Stack            CUP$SintacticoCCSS$stack,
    int                        CUP$SintacticoCCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCCSS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= numero 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E div E 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E por E 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= E menos E 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E mas E 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BOOL ::= pr_false 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BOOL ::= pr_true 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AREA ::= pr_vertical 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AREA",12, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AREA ::= pr_horizontal 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AREA",12, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONCA ::= cadena 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CONCA",8, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONCA ::= CONCA mas cadena 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CONCA",8, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FORM ::= pr_capital 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORM",14, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FORM ::= pr_mayuscula 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORM",14, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORM ::= pr_minuscula 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORM",14, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORM ::= pr_negrilla 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORM",14, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORM ::= pr_cursiva 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORM",14, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // T_FORMATO ::= FORM 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("T_FORMATO",9, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // T_FORMATO ::= T_FORMATO coma FORM 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("T_FORMATO",9, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T_ALINEACION ::= pr_derecha 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("T_ALINEACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T_ALINEACION ::= pr_izquierda 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("T_ALINEACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // T_ALINEACION ::= pr_centrado 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("T_ALINEACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // T_ALINEACION ::= pr_justificado 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("T_ALINEACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CU_DEF ::= pr_colortext asig cadena p_coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CU_DEF ::= pr_opaque asig BOOL 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CU_DEF ::= pr_borde asig cor_a E coma cadena coma BOOL cor_c p_coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CU_DEF ::= pr_visible asig cadena p_coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CU_DEF ::= pr_autoredimension asig cor_a BOOL coma AREA cor_c p_coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CU_DEF ::= pr_fondoelemento asig cadena p_coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CU_DEF ::= pr_tamtext asig E p_coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CU_DEF ::= pr_letra asig cadena p_coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CU_DEF ::= pr_formato asig T_FORMATO p_coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CU_DEF ::= pr_texto asig CONCA p_coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CU_DEF ::= pr_alineado asig T_ALINEACION p_coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DEF",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CU_DETECCION ::= CU_DEF 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DETECCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CU_DETECCION ::= CU_DETECCION CU_DEF 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CU_DETECCION",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DETECCION ::= pr_id pr_parA identificador pr_parC p_coma CU_DETECCION 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("DETECCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DETECCION ::= pr_grupo pr_parA identificador pr_parC p_coma CU_DETECCION 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("DETECCION",4, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_DEF ::= DETECCION 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CUERPO_DEF",3, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_DEF ::= CUERPO_DEF DETECCION 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("CUERPO_DEF",3, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINICION ::= identificador cor_a cor_c 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFINICION ::= identificador cor_a CUERPO_DEF cor_c 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEF ::= DEFINICION 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("DEF",1, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DEF ::= DEF DEFINICION 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("DEF",1, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DEF 
            {
              Object RESULT =null;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCCSS$parser.done_parsing();
          return CUP$SintacticoCCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

