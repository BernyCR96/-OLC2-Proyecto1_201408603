/* The following code was generated by JFlex 1.6.1 */

package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analizadores/lexico.jflex</tt>
 */
public class ALexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int MULTI = 4;
  public static final int STRING_CENTRO = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  8, 58,  7,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6,  9, 10,  9,  9,  9,  9,  0, 14, 15,  9,  9, 16, 13,  2, 11, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 17, 12, 18,  5,  9, 
     0, 28, 29, 19, 31, 27, 24, 39, 20, 25, 33,  3, 23, 22, 26, 32, 
    37,  3, 36, 34, 21, 35,  3,  3, 38,  3, 30,  0,  0,  0,  9,  4, 
     0, 47,  3, 40, 48, 54, 55, 49, 53, 42,  3, 43, 41,  3, 52, 51, 
    50,  3, 44, 56, 46, 45, 57,  3,  3,  3,  3,  9,  9,  9,  0,  0, 
     0,  0,  0,  0,  0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\3\1\7\1\10\1\11\1\12\1\13\1\14\20\4"+
    "\1\15\1\16\2\17\1\20\1\21\1\0\1\4\1\0"+
    "\1\22\1\23\1\0\2\4\1\24\1\4\1\25\17\4"+
    "\1\26\6\4\1\0\1\2\2\0\3\4\1\27\27\4"+
    "\1\0\1\30\1\31\1\4\1\32\5\4\1\0\10\4"+
    "\1\33\1\4\1\34\1\4\1\35\4\4\1\36\1\37"+
    "\3\4\1\40\1\41\1\42\11\0\3\4\1\43\3\4"+
    "\1\44\1\45\1\4\1\46\1\47\1\50\1\51\1\4"+
    "\1\52\1\53\1\4\2\0\1\54\1\0\1\55\14\0"+
    "\1\56\1\4\1\57\1\60\1\0\3\4\1\61\3\0"+
    "\1\62\14\0\1\4\1\0\1\63\2\4\1\64\1\0"+
    "\1\65\14\0\1\4\1\0\1\66\1\4\1\67\3\0"+
    "\1\70\1\71\1\72\3\0\1\73\2\0\1\74\1\4"+
    "\1\75\1\76\1\0\1\77\1\100\1\0\1\101\1\0"+
    "\1\102\1\103\1\0\1\104\1\0\1\105\1\0\1\106"+
    "\4\0\1\107\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\354\0\354\0\u01d8\0\u0213\0\u024e\0\u0162\0\u0162\0\u0162"+
    "\0\u0162\0\u0162\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0"+
    "\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\354\0\354\0\354\0\u0639\0\354\0\354"+
    "\0\u0674\0\u06af\0\u01d8\0\354\0\u0162\0\u06ea\0\u0725\0\u0760"+
    "\0\u019d\0\u079b\0\u019d\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u019d\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0674\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u019d\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\354\0\u019d\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\u170c\0\u019d\0\u1747\0\u019d\0\u1782\0\u019d"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\354\0\u019d\0\u18a9\0\u18e4"+
    "\0\u191f\0\u195a\0\u019d\0\u019d\0\u1995\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e"+
    "\0\u019d\0\u1c59\0\u1c94\0\u1ccf\0\u019d\0\u019d\0\u1d0a\0\u019d"+
    "\0\u019d\0\u019d\0\u019d\0\u1d45\0\u019d\0\u019d\0\u1d80\0\u1dbb"+
    "\0\u1df6\0\354\0\u1e31\0\354\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5"+
    "\0\u019d\0\u2130\0\u019d\0\u019d\0\u216b\0\u21a6\0\u21e1\0\u221c"+
    "\0\u019d\0\u2257\0\u2292\0\u22cd\0\354\0\u2308\0\u2343\0\u237e"+
    "\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556"+
    "\0\u2591\0\u25cc\0\u2607\0\u019d\0\u2642\0\u267d\0\354\0\u26b8"+
    "\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890"+
    "\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u019d"+
    "\0\u2a68\0\354\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\354\0\354"+
    "\0\u2b8f\0\u2bca\0\u2c05\0\354\0\u2c40\0\u2c7b\0\354\0\u2cb6"+
    "\0\354\0\u019d\0\u2cf1\0\354\0\354\0\u2d2c\0\354\0\u2d67"+
    "\0\354\0\354\0\u2da2\0\u019d\0\u2ddd\0\354\0\u2e18\0\354"+
    "\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\354\0\354";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\7\1\11\3\12\1\7"+
    "\1\13\1\14\1\15\1\7\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\10\1\24\2\10\1\25\1\26\1\10"+
    "\1\27\1\10\1\30\2\10\1\31\1\10\1\32\2\10"+
    "\1\33\2\10\1\34\1\10\1\35\1\10\1\36\2\10"+
    "\1\37\1\10\1\40\5\10\1\41\1\10\1\42\1\0"+
    "\10\43\1\44\62\43\7\45\2\12\4\45\1\46\54\45"+
    "\1\0\7\47\2\12\3\47\1\50\55\47\75\0\1\6"+
    "\1\51\72\0\1\7\1\0\1\7\4\0\1\7\1\0"+
    "\1\7\1\0\6\7\51\0\1\52\1\0\2\10\16\0"+
    "\47\10\1\0\12\53\1\54\60\53\2\0\1\7\1\0"+
    "\1\7\4\0\1\7\1\0\1\55\1\0\6\7\63\0"+
    "\1\56\60\0\1\52\1\0\2\10\16\0\1\57\1\60"+
    "\1\61\6\10\1\62\1\63\3\10\1\64\1\10\1\65"+
    "\26\10\2\0\1\52\1\0\2\10\16\0\6\10\1\66"+
    "\1\10\1\67\1\70\35\10\2\0\1\52\1\0\2\10"+
    "\16\0\6\10\1\71\40\10\2\0\1\52\1\0\2\10"+
    "\16\0\3\10\1\72\43\10\2\0\1\52\1\0\2\10"+
    "\16\0\7\10\1\73\37\10\2\0\1\52\1\0\2\10"+
    "\16\0\15\10\1\74\31\10\2\0\1\52\1\0\2\10"+
    "\16\0\22\10\1\75\24\10\2\0\1\52\1\0\2\10"+
    "\16\0\11\10\1\76\10\10\1\77\24\10\2\0\1\52"+
    "\1\0\2\10\16\0\11\10\1\100\35\10\2\0\1\52"+
    "\1\0\2\10\16\0\25\10\1\101\1\102\20\10\2\0"+
    "\1\52\1\0\2\10\16\0\35\10\1\103\11\10\2\0"+
    "\1\52\1\0\2\10\16\0\32\10\1\104\14\10\2\0"+
    "\1\52\1\0\2\10\16\0\26\10\1\105\12\10\1\106"+
    "\5\10\2\0\1\52\1\0\2\10\16\0\31\10\1\107"+
    "\15\10\2\0\1\52\1\0\2\10\16\0\40\10\1\110"+
    "\6\10\2\0\1\52\1\0\2\10\16\0\34\10\1\111"+
    "\12\10\14\0\1\112\60\0\1\113\72\0\1\52\1\114"+
    "\2\10\16\0\47\10\14\0\1\115\60\0\1\52\1\0"+
    "\2\10\16\0\17\10\1\116\27\10\2\0\1\52\1\0"+
    "\2\10\16\0\2\10\1\117\44\10\2\0\1\52\1\0"+
    "\2\10\16\0\16\10\1\120\30\10\2\0\1\52\1\0"+
    "\2\10\16\0\17\10\1\121\27\10\2\0\1\52\1\0"+
    "\2\10\16\0\10\10\1\122\36\10\2\0\1\52\1\0"+
    "\2\10\16\0\2\10\1\123\44\10\2\0\1\52\1\0"+
    "\2\10\16\0\23\10\1\124\23\10\2\0\1\52\1\0"+
    "\2\10\16\0\12\10\1\125\34\10\2\0\1\52\1\0"+
    "\2\10\16\0\4\10\1\126\2\10\1\127\37\10\2\0"+
    "\1\52\1\0\2\10\16\0\11\10\1\130\35\10\2\0"+
    "\1\52\1\0\2\10\16\0\1\131\3\10\1\132\42\10"+
    "\2\0\1\52\1\0\2\10\16\0\2\10\1\133\44\10"+
    "\2\0\1\52\1\0\2\10\16\0\1\134\46\10\2\0"+
    "\1\52\1\0\2\10\16\0\4\10\1\135\42\10\2\0"+
    "\1\52\1\0\2\10\16\0\6\10\1\136\40\10\2\0"+
    "\1\52\1\0\2\10\16\0\7\10\1\137\37\10\2\0"+
    "\1\52\1\0\2\10\16\0\45\10\1\140\1\10\2\0"+
    "\1\52\1\0\2\10\16\0\27\10\1\141\17\10\2\0"+
    "\1\52\1\0\2\10\16\0\33\10\1\142\13\10\2\0"+
    "\1\52\1\0\2\10\16\0\27\10\1\143\3\10\1\144"+
    "\13\10\2\0\1\52\1\0\2\10\16\0\25\10\1\145"+
    "\21\10\2\0\1\52\1\0\2\10\16\0\32\10\1\146"+
    "\14\10\2\0\1\52\1\0\2\10\16\0\41\10\1\147"+
    "\5\10\2\0\1\52\1\0\2\10\16\0\26\10\1\150"+
    "\20\10\14\0\1\151\60\0\1\10\106\0\1\152\56\0"+
    "\1\52\1\0\2\10\16\0\17\10\1\153\27\10\2\0"+
    "\1\52\1\0\2\10\16\0\3\10\1\154\43\10\2\0"+
    "\1\52\1\0\2\10\16\0\11\10\1\155\35\10\2\0"+
    "\1\52\1\0\2\10\16\0\21\10\1\156\25\10\2\0"+
    "\1\52\1\0\2\10\16\0\20\10\1\157\26\10\2\0"+
    "\1\52\1\0\2\10\16\0\2\10\1\160\44\10\2\0"+
    "\1\52\1\0\2\10\16\0\4\10\1\161\42\10\2\0"+
    "\1\52\1\0\1\10\1\162\16\0\47\10\2\0\1\52"+
    "\1\0\2\10\10\0\1\163\5\0\47\10\2\0\1\52"+
    "\1\0\2\10\16\0\24\10\1\164\22\10\2\0\1\52"+
    "\1\0\2\10\16\0\11\10\1\165\35\10\2\0\1\52"+
    "\1\0\2\10\16\0\11\10\1\166\35\10\2\0\1\52"+
    "\1\0\2\10\16\0\15\10\1\167\31\10\2\0\1\52"+
    "\1\0\2\10\16\0\6\10\1\170\40\10\2\0\1\52"+
    "\1\0\2\10\16\0\2\10\1\171\44\10\2\0\1\52"+
    "\1\0\2\10\16\0\7\10\1\172\37\10\2\0\1\52"+
    "\1\0\2\10\16\0\10\10\1\173\36\10\2\0\1\52"+
    "\1\0\2\10\16\0\45\10\1\174\1\10\2\0\1\52"+
    "\1\0\2\10\16\0\25\10\1\175\21\10\2\0\1\52"+
    "\1\0\2\10\16\0\34\10\1\176\12\10\2\0\1\52"+
    "\1\0\2\10\16\0\41\10\1\177\5\10\2\0\1\52"+
    "\1\0\2\10\16\0\40\10\1\200\6\10\2\0\1\52"+
    "\1\0\2\10\16\0\42\10\1\201\4\10\2\0\1\52"+
    "\1\0\2\10\16\0\37\10\1\202\7\10\2\0\1\52"+
    "\1\0\2\10\16\0\35\10\1\203\11\10\2\0\1\52"+
    "\1\0\2\10\16\0\40\10\1\204\6\10\6\0\1\205"+
    "\66\0\1\52\1\0\2\10\16\0\4\10\1\206\42\10"+
    "\2\0\1\52\1\0\1\10\1\207\16\0\47\10\2\0"+
    "\1\52\1\0\2\10\16\0\22\10\1\210\24\10\2\0"+
    "\1\52\1\0\2\10\16\0\4\10\1\211\42\10\2\0"+
    "\1\52\1\0\2\10\16\0\15\10\1\212\31\10\2\0"+
    "\1\52\1\0\2\10\16\0\11\10\1\213\35\10\2\0"+
    "\1\52\1\0\2\10\16\0\2\10\1\214\44\10\24\0"+
    "\1\215\1\0\1\216\2\0\1\217\1\220\1\0\1\221"+
    "\1\0\1\222\2\0\1\223\1\0\1\224\2\0\1\225"+
    "\26\0\1\52\1\0\2\10\16\0\10\10\1\226\36\10"+
    "\2\0\1\52\1\0\2\10\16\0\12\10\1\227\34\10"+
    "\2\0\1\52\1\0\2\10\16\0\1\230\46\10\2\0"+
    "\1\52\1\0\2\10\16\0\7\10\1\231\37\10\2\0"+
    "\1\52\1\0\2\10\16\0\15\10\1\232\31\10\2\0"+
    "\1\52\1\0\2\10\16\0\15\10\1\233\31\10\2\0"+
    "\1\52\1\0\2\10\16\0\7\10\1\234\37\10\2\0"+
    "\1\52\1\0\2\10\16\0\4\10\1\235\42\10\2\0"+
    "\1\52\1\0\2\10\16\0\30\10\1\236\16\10\2\0"+
    "\1\52\1\0\2\10\16\0\43\10\1\237\3\10\2\0"+
    "\1\52\1\0\2\10\16\0\40\10\1\240\6\10\2\0"+
    "\1\52\1\0\2\10\16\0\40\10\1\241\6\10\2\0"+
    "\1\52\1\0\2\10\16\0\40\10\1\242\6\10\2\0"+
    "\1\52\1\0\2\10\16\0\31\10\1\243\15\10\2\0"+
    "\1\52\1\0\2\10\16\0\2\10\1\244\44\10\2\0"+
    "\1\52\1\0\2\10\16\0\15\10\1\245\31\10\2\0"+
    "\1\52\1\0\2\10\16\0\15\10\1\246\31\10\2\0"+
    "\1\52\1\0\1\10\1\247\16\0\47\10\24\0\1\250"+
    "\1\251\1\252\6\0\1\253\1\254\3\0\1\255\1\0"+
    "\1\256\60\0\1\257\1\0\1\260\1\261\67\0\1\262"+
    "\67\0\1\263\76\0\1\264\100\0\1\265\77\0\1\266"+
    "\72\0\1\267\61\0\1\270\37\0\1\52\1\0\2\10"+
    "\16\0\7\10\1\271\37\10\2\0\1\52\1\0\2\10"+
    "\16\0\10\10\1\272\36\10\2\0\1\52\1\0\2\10"+
    "\16\0\10\10\1\273\36\10\2\0\1\52\1\0\2\10"+
    "\16\0\7\10\1\274\37\10\2\0\1\52\1\0\2\10"+
    "\10\0\1\275\5\0\47\10\2\0\1\52\1\0\2\10"+
    "\16\0\10\10\1\276\36\10\2\0\1\52\1\0\2\10"+
    "\16\0\34\10\1\277\12\10\2\0\1\52\1\0\2\10"+
    "\16\0\10\10\1\300\36\10\2\0\1\52\1\0\2\10"+
    "\16\0\11\10\1\301\35\10\43\0\1\302\55\0\1\303"+
    "\106\0\1\304\73\0\1\305\63\0\1\306\64\0\1\307"+
    "\113\0\1\310\61\0\1\311\64\0\1\312\77\0\1\313"+
    "\61\0\1\314\3\0\1\315\70\0\1\316\70\0\1\317"+
    "\100\0\1\320\73\0\1\321\41\0\1\52\1\0\2\10"+
    "\16\0\13\10\1\322\33\10\31\0\1\323\43\0\1\52"+
    "\1\0\2\10\16\0\21\10\1\324\25\10\2\0\1\52"+
    "\1\0\2\10\16\0\35\10\1\325\11\10\2\0\1\52"+
    "\1\0\2\10\16\0\23\10\1\326\23\10\43\0\1\327"+
    "\56\0\1\330\100\0\1\331\102\0\1\332\71\0\1\333"+
    "\54\0\1\334\74\0\1\335\47\0\1\336\135\0\1\337"+
    "\57\0\1\340\72\0\1\341\76\0\1\342\63\0\1\343"+
    "\73\0\1\344\73\0\1\345\40\0\1\52\1\0\2\10"+
    "\16\0\11\10\1\346\35\10\32\0\1\347\42\0\1\52"+
    "\1\0\2\10\16\0\40\10\1\350\6\10\2\0\1\52"+
    "\1\0\2\10\16\0\2\10\1\351\44\10\30\0\1\352"+
    "\47\0\1\353\133\0\1\354\54\0\1\355\103\0\1\356"+
    "\66\0\1\357\63\0\1\360\100\0\1\361\74\0\1\362"+
    "\60\0\1\363\101\0\1\364\100\0\1\365\64\0\1\366"+
    "\67\0\1\367\44\0\1\52\1\0\2\10\16\0\14\10"+
    "\1\370\32\10\33\0\1\371\41\0\1\52\1\0\2\10"+
    "\16\0\15\10\1\372\31\10\26\0\1\373\105\0\1\374"+
    "\72\0\1\375\36\0\1\376\120\0\1\377\73\0\1\u0100"+
    "\72\0\1\u0101\71\0\1\u0102\73\0\1\u0103\40\0\1\52"+
    "\1\0\2\10\16\0\15\10\1\u0104\31\10\34\0\1\u0105"+
    "\73\0\1\u0106\74\0\1\u0107\100\0\1\u0108\74\0\1\u0109"+
    "\60\0\1\u010a\63\0\1\u010b\104\0\1\u010c\73\0\1\u010d"+
    "\72\0\1\u010e\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12095];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\2\11\30\1\3\11\1\1\2\11"+
    "\1\0\1\1\1\0\1\11\1\1\1\0\33\1\1\0"+
    "\1\1\2\0\33\1\1\0\1\11\10\1\1\0\21\1"+
    "\1\11\7\1\11\0\22\1\2\0\1\11\1\0\1\11"+
    "\14\0\4\1\1\0\4\1\3\0\1\11\14\0\1\1"+
    "\1\0\3\1\1\11\1\0\1\1\14\0\1\1\1\0"+
    "\2\1\1\11\3\0\1\1\2\11\3\0\1\11\2\0"+
    "\1\11\1\1\1\11\1\1\1\0\2\11\1\0\1\11"+
    "\1\0\2\11\1\0\1\1\1\0\1\11\1\0\1\11"+
    "\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String colector_cadena = "";
public String comentario = "";
//public ArrayList<Nodo_Error> Listado_Errores;  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ALexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("simbolo: <<"+yytext()+">> ["+yyline+" , "+yycolumn+"]");
            return new Symbol(Simbolos.ptodo, yycolumn, yyline, yytext());
             //Listado_Errores.add(new Nodo_Error(yytext(),yycolumn,yyline,"Error Lexico","El caracter no pertenece al lenguaje"));
            }
          case 73: break;
          case 2: 
            { System.out.println("numero "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.numero, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 3: 
              
            { System.out.println("simbolooo "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.otro_simb, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 4: 
            { System.out.println("id "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.identificador, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 5: 
            { colector_cadena = yytext();
                yybegin(STRING_CENTRO);
            }
          case 77: break;
          case 6: 
            { 
            }
          case 78: break;
          case 7: 
            { System.out.println("menor"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 8: 
            { System.out.println("par_abierto"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.pr_parA, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 9: 
            { System.out.println("par_cerrado"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.pr_parC, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 10: 
            { System.out.println("coma "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 11: 
            { System.out.println("punto y coma "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.p_coma, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 12: 
            { System.out.println("igual"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 13: 
            { comentario += yytext();
            }
          case 85: break;
          case 14: 
            { System.out.println("Comentario simple: "+comentario);
                comentario = "";
                yybegin(YYINITIAL);
            }
          case 86: break;
          case 15: 
            { comentario+= yytext();
            }
          case 87: break;
          case 16: 
            { colector_cadena += yytext();
            }
          case 88: break;
          case 17: 
            { String cadena_temporal = colector_cadena; 
        colector_cadena = ""; 
        yybegin(YYINITIAL); 
        System.out.println("Comentario dentro etiquetas: "+cadena_temporal);
        return new Symbol(Simbolos.cadena2, yycolumn, yyline, cadena_temporal);
            }
          case 89: break;
          case 18: 
            { System.out.println("cadena "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 19: 
            { yybegin(COMENTARIO);
            }
          case 91: break;
          case 20: 
            { System.out.println("pr_ct "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_ct, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 21: 
            { System.out.println("pr_cb "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_cb, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 22: 
            { System.out.println("pr_id "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_id, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 23: 
            { System.out.println("pr_cjs  "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_cjs, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 24: 
            { yybegin(MULTI);
            }
          case 96: break;
          case 25: 
            { System.out.println("pr_ccss "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_ccss, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 26: 
            { System.out.println("pr_caja  "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_caja, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 27: 
            { System.out.println("pr_atri_ccss "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_atri_ccss, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 28: 
            { System.out.println("pr_ruta "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_ruta, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 29: 
            { System.out.println("pr_alto  "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_alto, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 30: 
            { System.out.println("Comentario multi: "+comentario);
                comentario ="";
             yybegin(YYINITIAL);
            }
          case 102: break;
          case 31: 
            { System.out.println("pr_chtml "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_chtml, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 32: 
            { System.out.println("pr_texto "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_texto, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 33: 
            { System.out.println("pr_tabla "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.pr_tabla, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 34: 
            { System.out.println("pr_fil_t "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_fil_t, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 35: 
            { System.out.println("pr_boton  "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_boton, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 36: 
            { System.out.println("pr_panel "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_panel, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 37: 
            { System.out.println("pr_click "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_click, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 38: 
            { System.out.println("pr_ancho "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_ancho, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 39: 
            { System.out.println("pr_grupo "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_grupo, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 40: 
            { System.out.println("pr_fondo"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.pr_fondo, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 41: 
            { System.out.println("pr_valor "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_valor, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 42: 
            { System.out.println("pr_cuerpo "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_cuerpo, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 43: 
            { System.out.println("pr_titulo"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.pr_titulo, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 44: 
            { System.out.println("pr_finct "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_finct, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 45: 
            { System.out.println("pr_fincb "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_fincb, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 46: 
            { System.out.println("pr_imagen "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_imagen, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 47: 
            { System.out.println("pr_enlace "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_enlace, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 48: 
            { System.out.println("pr_opcion "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_opcion, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 49: 
            { System.out.println("pr_texto_a "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_texto_a, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 50: 
            { System.out.println("pr_fincjs  "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_fincjs, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 51: 
            { System.out.println("pr_spinner "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.pr_spinner, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 52: 
            { System.out.println("pr_finccss "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_finccss, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 53: 
            { System.out.println("pr_fincaja  "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_fincaja, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 54: 
            { System.out.println("pr_alineado"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.pr_alineado, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 55: 
            { System.out.println("pr_finchtml "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_finchtml, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 56: 
            { System.out.println("pr_fintexto "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_fintexto, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 57: 
            { System.out.println("pr_fintabla "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.pr_fintabla, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 58: 
            { System.out.println("pr_finfil_t "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_finfil_t, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 59: 
            { System.out.println("pr_finboton  "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_finboton, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 60: 
            { System.out.println("pr_finpanel "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_finpanel, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 61: 
            { System.out.println("pr_salto "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_salto, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 62: 
            { System.out.println("pr_caja_texto"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_caja_texto, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 63: 
            { System.out.println("pr_fincuerpo "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_fincuerpo, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 64: 
            { System.out.println("pr_fintitulo"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.pr_fintitulo, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 65: 
            { System.out.println("pr_finimagen "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_finimagen, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 66: 
            { System.out.println("pr_finenlace "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_finenlace, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 67: 
            { System.out.println("pr_finopcion "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_finopcion, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 68: 
            { System.out.println("pr_encabezado "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_encabezado, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 69: 
            { System.out.println("pr_fintexto_a "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_fintexto_a, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 70: 
            { System.out.println("pr_finspinner "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(Simbolos.pr_finspinner, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 71: 
            { System.out.println("pr_fincaja_texto"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_fincaja_texto, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 72: 
            { System.out.println("pr_finencabezado "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(Simbolos.pr_finencabezado, yycolumn, yyline, yytext());
            }
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
