
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 21 01:01:50 CST 2018
//----------------------------------------------------

package Analizadores;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.lang.Math;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 21 01:01:50 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\021\004\000\002\022\011\000\002\020\011" +
    "\000\002\020\015\000\002\005\004\000\002\005\003\000" +
    "\002\007\010\000\002\007\014\000\002\007\014\000\002" +
    "\007\014\000\002\007\010\000\002\007\014\000\002\006" +
    "\004\000\002\006\003\000\002\010\013\000\002\010\011" +
    "\000\002\010\012\000\002\010\010\000\002\010\012\000" +
    "\002\010\012\000\002\010\010\000\002\010\010\000\002" +
    "\010\012\000\002\010\012\000\002\010\010\000\002\010" +
    "\010\000\002\010\012\000\002\010\012\000\002\010\010" +
    "\000\002\010\010\000\002\010\012\000\002\010\012\000" +
    "\002\010\010\000\002\010\010\000\002\010\014\000\002" +
    "\010\014\000\002\010\013\000\002\010\011\000\002\010" +
    "\010\000\002\010\010\000\002\010\012\000\002\010\012" +
    "\000\002\010\010\000\002\010\010\000\002\010\013\000" +
    "\002\010\011\000\002\010\013\000\002\010\012\000\002" +
    "\010\011\000\002\010\010\000\002\010\005\000\002\024" +
    "\004\000\002\024\003\000\002\023\014\000\002\023\014" +
    "\000\002\011\005\000\002\011\003\000\002\012\005\000" +
    "\002\012\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\016\004\000\002\016\003\000\002" +
    "\030\013\000\002\030\011\000\002\030\010\000\002\015" +
    "\004\000\002\015\003\000\002\017\013\000\002\017\012" +
    "\000\002\017\012\000\002\017\011\000\002\017\010\000" +
    "\002\017\010\000\002\017\011\000\002\017\010\000\002" +
    "\017\010\000\002\017\012\000\002\017\012\000\002\017" +
    "\013\000\002\025\012\000\002\025\012\000\002\025\010" +
    "\000\002\025\010\000\002\025\012\000\002\025\012\000" +
    "\002\025\010\000\002\025\010\000\002\031\004\000\002" +
    "\031\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b2\000\004\005\005\001\002\000\004\002\000\001" +
    "\002\000\004\011\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\006\011\001\002\000" +
    "\004\005\014\001\002\000\004\005\074\001\002\000\004" +
    "\005\071\001\002\000\004\012\015\001\002\000\004\006" +
    "\016\001\002\000\004\005\021\001\002\000\004\005\ufff9" +
    "\001\002\000\004\005\066\001\002\000\010\013\022\014" +
    "\023\015\024\001\002\000\004\041\051\001\002\000\004" +
    "\041\035\001\002\000\006\006\026\102\025\001\002\000" +
    "\004\005\032\001\002\000\004\005\027\001\002\000\004" +
    "\055\030\001\002\000\004\006\031\001\002\000\004\005" +
    "\ufff4\001\002\000\004\055\033\001\002\000\004\006\034" +
    "\001\002\000\004\005\ufff8\001\002\000\004\007\036\001" +
    "\002\000\004\103\037\001\002\000\004\004\040\001\002" +
    "\000\006\006\042\102\041\001\002\000\004\005\046\001" +
    "\002\000\004\005\043\001\002\000\004\054\044\001\002" +
    "\000\004\006\045\001\002\000\004\005\ufff5\001\002\000" +
    "\004\054\047\001\002\000\004\006\050\001\002\000\004" +
    "\005\ufff7\001\002\000\004\007\052\001\002\000\004\103" +
    "\053\001\002\000\004\004\054\001\002\000\006\006\056" +
    "\102\055\001\002\000\004\005\062\001\002\000\004\005" +
    "\057\001\002\000\004\053\060\001\002\000\004\006\061" +
    "\001\002\000\004\005\ufff3\001\002\000\004\053\063\001" +
    "\002\000\004\006\064\001\002\000\004\005\ufff6\001\002" +
    "\000\004\005\ufffa\001\002\000\012\013\022\014\023\015" +
    "\024\052\067\001\002\000\004\006\070\001\002\000\004" +
    "\005\ufffd\001\002\000\004\051\072\001\002\000\004\006" +
    "\073\001\002\000\004\002\uffff\001\002\000\004\016\076" +
    "\001\002\000\004\005\ufffe\001\002\000\006\006\100\021" +
    "\077\001\002\000\004\007\u01ad\001\002\000\004\005\103" +
    "\001\002\000\004\005\u01aa\001\002\000\004\005\ufff1\001" +
    "\002\000\030\017\116\020\107\022\110\023\106\024\105" +
    "\025\115\026\104\033\111\034\112\036\114\037\113\001" +
    "\002\000\022\006\u0127\040\126\042\120\043\125\044\122" +
    "\045\117\046\123\102\u0125\001\002\000\024\006\u0115\040" +
    "\240\041\235\042\231\043\237\044\233\045\230\046\236" +
    "\102\u0114\001\002\000\024\006\u0103\040\240\041\235\042" +
    "\231\043\237\044\233\045\230\046\236\102\u0102\001\002" +
    "\000\022\006\361\040\126\042\120\043\125\044\122\045" +
    "\117\046\123\102\357\001\002\000\022\006\337\040\126" +
    "\042\120\043\125\044\122\045\117\046\123\102\335\001" +
    "\002\000\022\006\315\040\126\042\120\043\125\044\122" +
    "\045\117\046\123\102\313\001\002\000\022\006\241\040" +
    "\240\041\235\042\231\043\237\044\233\045\230\046\236" +
    "\001\002\000\004\006\227\001\002\000\020\006\206\040" +
    "\126\042\120\043\125\044\122\045\117\046\123\001\002" +
    "\000\004\041\171\001\002\000\020\006\127\040\126\042" +
    "\120\043\125\044\122\045\117\046\123\001\002\000\004" +
    "\007\167\001\002\000\004\007\165\001\002\000\004\004" +
    "\uffc6\001\002\000\004\007\163\001\002\000\004\007\161" +
    "\001\002\000\004\004\147\001\002\000\004\007\145\001" +
    "\002\000\004\007\140\001\002\000\004\005\131\001\002" +
    "\000\004\005\135\001\002\000\032\017\116\020\107\022" +
    "\110\023\106\024\105\025\115\026\104\033\111\034\112" +
    "\036\114\037\113\057\132\001\002\000\004\006\133\001" +
    "\002\000\004\005\uffed\001\002\000\004\005\ufff2\001\002" +
    "\000\032\017\116\020\107\022\110\023\106\024\105\025" +
    "\115\026\104\033\111\034\112\036\114\037\113\057\136" +
    "\001\002\000\004\006\137\001\002\000\004\005\uffef\001" +
    "\002\000\010\077\141\101\143\103\142\001\002\000\004" +
    "\004\uff95\001\002\000\004\004\uff96\001\002\000\004\004" +
    "\uff94\001\002\000\004\004\uffc3\001\002\000\010\077\141" +
    "\101\143\103\142\001\002\000\004\004\uffc1\001\002\000" +
    "\020\006\151\040\126\042\120\043\125\044\122\045\117" +
    "\046\123\001\002\000\004\004\uffc7\001\002\000\004\005" +
    "\153\001\002\000\004\005\156\001\002\000\032\017\116" +
    "\020\107\022\110\023\106\024\105\025\115\026\104\033" +
    "\111\034\112\036\114\037\113\057\154\001\002\000\004" +
    "\006\155\001\002\000\004\005\uffee\001\002\000\032\017" +
    "\116\020\107\022\110\023\106\024\105\025\115\026\104" +
    "\033\111\034\112\036\114\037\113\057\157\001\002\000" +
    "\004\006\160\001\002\000\004\005\ufff0\001\002\000\010" +
    "\077\141\101\143\103\142\001\002\000\004\004\uffbe\001" +
    "\002\000\010\077\141\101\143\103\142\001\002\000\004" +
    "\004\uffc0\001\002\000\010\077\141\101\143\103\142\001" +
    "\002\000\004\004\uffc2\001\002\000\010\077\141\101\143" +
    "\103\142\001\002\000\004\004\uffbf\001\002\000\004\007" +
    "\172\001\002\000\004\103\173\001\002\000\004\004\174" +
    "\001\002\000\006\006\176\102\175\001\002\000\004\005" +
    "\202\001\002\000\004\005\177\001\002\000\004\064\200" +
    "\001\002\000\004\006\201\001\002\000\004\005\uffdb\001" +
    "\002\000\004\064\203\001\002\000\004\006\204\001\002" +
    "\000\004\005\uffdc\001\002\000\004\004\216\001\002\000" +
    "\006\005\210\077\207\001\002\000\004\005\213\001\002" +
    "\000\004\074\211\001\002\000\004\006\212\001\002\000" +
    "\004\005\uffcd\001\002\000\004\074\214\001\002\000\004" +
    "\006\215\001\002\000\004\005\uffce\001\002\000\020\006" +
    "\217\040\126\042\120\043\125\044\122\045\117\046\123" +
    "\001\002\000\006\005\221\077\220\001\002\000\004\005" +
    "\224\001\002\000\004\074\222\001\002\000\004\006\223" +
    "\001\002\000\004\005\uffcf\001\002\000\004\074\225\001" +
    "\002\000\004\006\226\001\002\000\004\005\uffd0\001\002" +
    "\000\004\005\uffcc\001\002\000\004\007\311\001\002\000" +
    "\004\007\307\001\002\000\004\004\300\001\002\000\004" +
    "\007\276\001\002\000\004\004\uffc4\001\002\000\004\007" +
    "\274\001\002\000\004\007\272\001\002\000\004\007\270" +
    "\001\002\000\004\007\266\001\002\000\004\005\244\001" +
    "\002\000\004\005\263\001\002\000\004\005\uffca\001\002" +
    "\000\004\035\245\001\002\000\004\032\246\001\002\000" +
    "\004\007\247\001\002\000\010\077\141\101\143\103\142" +
    "\001\002\000\004\004\251\001\002\000\006\006\253\102" +
    "\252\001\002\000\004\005\257\001\002\000\004\005\254" +
    "\001\002\000\004\073\255\001\002\000\004\006\256\001" +
    "\002\000\004\005\uffc9\001\002\000\004\073\260\001\002" +
    "\000\004\006\261\001\002\000\004\005\uffc8\001\002\000" +
    "\004\005\uffcb\001\002\000\006\035\245\072\264\001\002" +
    "\000\004\006\265\001\002\000\004\005\uffd1\001\002\000" +
    "\010\077\141\101\143\103\142\001\002\000\004\004\uffbd" +
    "\001\002\000\010\077\141\101\143\103\142\001\002\000" +
    "\004\004\uffba\001\002\000\010\077\141\101\143\103\142" +
    "\001\002\000\004\004\uffb7\001\002\000\010\077\141\101" +
    "\143\103\142\001\002\000\004\004\uffbc\001\002\000\010" +
    "\077\141\101\143\103\142\001\002\000\004\004\uffb9\001" +
    "\002\000\022\006\302\040\240\041\235\042\231\043\237" +
    "\044\233\045\230\046\236\001\002\000\004\004\uffc5\001" +
    "\002\000\004\005\244\001\002\000\004\005\304\001\002" +
    "\000\006\035\245\072\305\001\002\000\004\006\306\001" +
    "\002\000\004\005\uffd2\001\002\000\010\077\141\101\143" +
    "\103\142\001\002\000\004\004\uffbb\001\002\000\010\077" +
    "\141\101\143\103\142\001\002\000\004\004\uffb8\001\002" +
    "\000\004\005\332\001\002\000\004\004\321\001\002\000" +
    "\004\005\316\001\002\000\004\071\317\001\002\000\004" +
    "\006\320\001\002\000\004\005\uffd3\001\002\000\022\006" +
    "\323\040\126\042\120\043\125\044\122\045\117\046\123" +
    "\102\322\001\002\000\004\005\327\001\002\000\004\005" +
    "\324\001\002\000\004\071\325\001\002\000\004\006\326" +
    "\001\002\000\004\005\uffd5\001\002\000\004\071\330\001" +
    "\002\000\004\006\331\001\002\000\004\005\uffd6\001\002" +
    "\000\004\071\333\001\002\000\004\006\334\001\002\000" +
    "\004\005\uffd4\001\002\000\004\005\354\001\002\000\004" +
    "\004\343\001\002\000\004\005\340\001\002\000\004\061" +
    "\341\001\002\000\004\006\342\001\002\000\004\005\uffe5" +
    "\001\002\000\022\006\345\040\126\042\120\043\125\044" +
    "\122\045\117\046\123\102\344\001\002\000\004\005\351" +
    "\001\002\000\004\005\346\001\002\000\004\061\347\001" +
    "\002\000\004\006\350\001\002\000\004\005\uffe7\001\002" +
    "\000\004\061\352\001\002\000\004\006\353\001\002\000" +
    "\004\005\uffe8\001\002\000\004\061\355\001\002\000\004" +
    "\006\356\001\002\000\004\005\uffe6\001\002\000\004\005" +
    "\376\001\002\000\004\004\365\001\002\000\004\005\362" +
    "\001\002\000\004\060\363\001\002\000\004\006\364\001" +
    "\002\000\004\005\uffea\001\002\000\022\006\367\040\126" +
    "\042\120\043\125\044\122\045\117\046\123\102\366\001" +
    "\002\000\004\005\373\001\002\000\004\005\370\001\002" +
    "\000\004\060\371\001\002\000\004\006\372\001\002\000" +
    "\004\005\uffeb\001\002\000\004\060\374\001\002\000\004" +
    "\006\375\001\002\000\004\005\uffec\001\002\000\004\060" +
    "\377\001\002\000\004\006\u0100\001\002\000\004\005\uffe9" +
    "\001\002\000\004\004\u010a\001\002\000\004\005\u0107\001" +
    "\002\000\004\005\u0104\001\002\000\004\062\u0105\001\002" +
    "\000\004\006\u0106\001\002\000\004\005\uffe1\001\002\000" +
    "\004\062\u0108\001\002\000\004\006\u0109\001\002\000\004" +
    "\005\uffe2\001\002\000\024\006\u010c\040\240\041\235\042" +
    "\231\043\237\044\233\045\230\046\236\102\u010b\001\002" +
    "\000\004\005\u0110\001\002\000\004\005\u010d\001\002\000" +
    "\004\062\u010e\001\002\000\004\006\u010f\001\002\000\004" +
    "\005\uffe3\001\002\000\004\062\u0111\001\002\000\004\006" +
    "\u0112\001\002\000\004\005\uffe4\001\002\000\004\004\u011c" +
    "\001\002\000\004\005\u0119\001\002\000\004\005\u0116\001" +
    "\002\000\004\063\u0117\001\002\000\004\006\u0118\001\002" +
    "\000\004\005\uffdd\001\002\000\004\063\u011a\001\002\000" +
    "\004\006\u011b\001\002\000\004\005\uffde\001\002\000\024" +
    "\006\u011e\040\240\041\235\042\231\043\237\044\233\045" +
    "\230\046\236\102\u011d\001\002\000\004\005\u0122\001\002" +
    "\000\004\005\u011f\001\002\000\004\063\u0120\001\002\000" +
    "\004\006\u0121\001\002\000\004\005\uffdf\001\002\000\004" +
    "\063\u0123\001\002\000\004\006\u0124\001\002\000\004\005" +
    "\uffe0\001\002\000\004\005\u01a7\001\002\000\004\004\u01a0" +
    "\001\002\000\004\005\u0129\001\002\000\004\005\u019c\001" +
    "\002\000\006\027\u012c\065\u012b\001\002\000\004\005\uffb5" +
    "\001\002\000\004\006\u019b\001\002\000\020\006\u012e\040" +
    "\126\042\120\043\125\044\122\045\117\046\123\001\002" +
    "\000\004\004\u0194\001\002\000\004\005\u0130\001\002\000" +
    "\004\005\u0190\001\002\000\010\030\u0133\031\u0134\066\u0132" +
    "\001\002\000\004\005\uffb0\001\002\000\004\006\u018f\001" +
    "\002\000\022\006\u0177\040\126\042\120\043\125\044\122" +
    "\045\117\046\123\102\u0175\001\002\000\022\006\u0137\040" +
    "\126\042\120\043\125\044\122\045\117\046\123\102\u0135" +
    "\001\002\000\004\005\u0172\001\002\000\004\004\u0165\001" +
    "\002\000\004\005\u0139\001\002\000\004\005\u0162\001\002" +
    "\000\010\023\u013c\024\u013a\070\u013b\001\002\000\024\006" +
    "\u0152\040\240\041\235\042\231\043\237\044\233\045\230" +
    "\046\236\102\u0151\001\002\000\004\006\u014f\001\002\000" +
    "\024\006\u013f\040\240\041\235\042\231\043\237\044\233" +
    "\045\230\046\236\102\u013e\001\002\000\004\004\u0146\001" +
    "\002\000\004\005\u0143\001\002\000\004\005\u0140\001\002" +
    "\000\004\062\u0141\001\002\000\004\006\u0142\001\002\000" +
    "\004\005\uffa0\001\002\000\004\062\u0144\001\002\000\004" +
    "\006\u0145\001\002\000\004\005\uffa1\001\002\000\024\006" +
    "\u0148\040\240\041\235\042\231\043\237\044\233\045\230" +
    "\046\236\102\u0147\001\002\000\004\005\u014c\001\002\000" +
    "\004\005\u0149\001\002\000\004\062\u014a\001\002\000\004" +
    "\006\u014b\001\002\000\004\005\uffa2\001\002\000\004\062" +
    "\u014d\001\002\000\004\006\u014e\001\002\000\004\005\uffa3" +
    "\001\002\000\004\005\uffa8\001\002\000\004\004\u0159\001" +
    "\002\000\004\005\u0156\001\002\000\004\005\u0153\001\002" +
    "\000\004\063\u0154\001\002\000\004\006\u0155\001\002\000" +
    "\004\005\uff9c\001\002\000\004\063\u0157\001\002\000\004" +
    "\006\u0158\001\002\000\004\005\uff9d\001\002\000\024\006" +
    "\u015b\040\240\041\235\042\231\043\237\044\233\045\230" +
    "\046\236\102\u015a\001\002\000\004\005\u015f\001\002\000" +
    "\004\005\u015c\001\002\000\004\063\u015d\001\002\000\004" +
    "\006\u015e\001\002\000\004\005\uff9e\001\002\000\004\063" +
    "\u0160\001\002\000\004\006\u0161\001\002\000\004\005\uff9f" +
    "\001\002\000\004\070\u0163\001\002\000\004\006\u0164\001" +
    "\002\000\004\005\uffa9\001\002\000\022\006\u0167\040\126" +
    "\042\120\043\125\044\122\045\117\046\123\102\u0166\001" +
    "\002\000\004\005\u016f\001\002\000\004\005\u0169\001\002" +
    "\000\004\005\u016c\001\002\000\010\023\u013c\024\u013a\070" +
    "\u016a\001\002\000\004\006\u016b\001\002\000\004\005\uffa5" +
    "\001\002\000\004\070\u016d\001\002\000\004\006\u016e\001" +
    "\002\000\004\005\uffa4\001\002\000\004\070\u0170\001\002" +
    "\000\004\006\u0171\001\002\000\004\005\uffa6\001\002\000" +
    "\004\070\u0173\001\002\000\004\006\u0174\001\002\000\004" +
    "\005\uffa7\001\002\000\004\005\u018c\001\002\000\004\004" +
    "\u017f\001\002\000\004\005\u0179\001\002\000\004\005\u017c" +
    "\001\002\000\010\023\u013c\024\u013a\067\u017a\001\002\000" +
    "\004\006\u017b\001\002\000\004\005\uffaa\001\002\000\004" +
    "\067\u017d\001\002\000\004\006\u017e\001\002\000\004\005" +
    "\uffac\001\002\000\022\006\u0181\040\126\042\120\043\125" +
    "\044\122\045\117\046\123\102\u0180\001\002\000\004\005" +
    "\u0189\001\002\000\004\005\u0183\001\002\000\004\005\u0186" +
    "\001\002\000\010\023\u013c\024\u013a\067\u0184\001\002\000" +
    "\004\006\u0185\001\002\000\004\005\uffad\001\002\000\004" +
    "\067\u0187\001\002\000\004\006\u0188\001\002\000\004\005" +
    "\uffaf\001\002\000\004\067\u018a\001\002\000\004\006\u018b" +
    "\001\002\000\004\005\uffae\001\002\000\004\067\u018d\001" +
    "\002\000\004\006\u018e\001\002\000\004\005\uffab\001\002" +
    "\000\004\005\uffb2\001\002\000\010\030\u0133\031\u0134\066" +
    "\u0192\001\002\000\004\005\uffb1\001\002\000\004\006\u0193" +
    "\001\002\000\004\005\uffb3\001\002\000\020\006\u0195\040" +
    "\126\042\120\043\125\044\122\045\117\046\123\001\002" +
    "\000\004\005\u0197\001\002\000\004\005\u0198\001\002\000" +
    "\006\030\u0133\031\u0134\001\002\000\010\030\u0133\031\u0134" +
    "\066\u0199\001\002\000\004\006\u019a\001\002\000\004\005" +
    "\uffb4\001\002\000\004\005\uffd8\001\002\000\006\027\u012c" +
    "\065\u019e\001\002\000\004\005\uffb6\001\002\000\004\006" +
    "\u019f\001\002\000\004\005\uffd9\001\002\000\020\006\u01a1" +
    "\040\126\042\120\043\125\044\122\045\117\046\123\001" +
    "\002\000\004\005\u01a3\001\002\000\004\005\u01a4\001\002" +
    "\000\004\027\u012c\001\002\000\006\027\u012c\065\u01a5\001" +
    "\002\000\004\006\u01a6\001\002\000\004\005\uffda\001\002" +
    "\000\004\065\u01a8\001\002\000\004\006\u01a9\001\002\000" +
    "\004\005\uffd7\001\002\000\032\017\116\020\107\022\110" +
    "\023\106\024\105\025\115\026\104\033\111\034\112\036" +
    "\114\037\113\056\u01ab\001\002\000\004\006\u01ac\001\002" +
    "\000\004\005\ufffc\001\002\000\010\077\141\101\143\103" +
    "\142\001\002\000\004\004\u01af\001\002\000\004\006\u01b0" +
    "\001\002\000\004\005\103\001\002\000\004\005\u01b2\001" +
    "\002\000\032\017\116\020\107\022\110\023\106\024\105" +
    "\025\115\026\104\033\111\034\112\036\114\037\113\056" +
    "\u01b3\001\002\000\004\006\u01b4\001\002\000\004\005\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b2\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\012\022\011\001\001\000" +
    "\004\020\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\017\007\016\001\001\000" +
    "\002\001\001\000\004\007\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\100\010\101\001\001\000\004\010" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\u0125\013\120\001\001\000\006\012\u0112\014\233\001" +
    "\001\000\006\012\u0100\014\233\001\001\000\006\011\357" +
    "\013\120\001\001\000\006\011\335\013\120\001\001\000" +
    "\006\011\313\013\120\001\001\000\006\012\231\014\233" +
    "\001\001\000\002\001\001\000\006\011\204\013\120\001" +
    "\001\000\002\001\001\000\006\011\123\013\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\127\010\101\001" +
    "\001\000\004\010\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\145\001\001\000\002" +
    "\001\001\000\004\013\147\001\001\000\002\001\001\000" +
    "\006\006\151\010\101\001\001\000\004\010\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\161\001\001\000\002\001\001\000\004\026\163\001" +
    "\001\000\002\001\001\000\004\026\165\001\001\000\002" +
    "\001\001\000\004\026\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\242\024\241\001\001" +
    "\000\004\023\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\266\001\001\000" +
    "\002\001\001\000\004\026\270\001\001\000\002\001\001" +
    "\000\004\026\272\001\001\000\002\001\001\000\004\026" +
    "\274\001\001\000\002\001\001\000\004\026\276\001\001" +
    "\000\002\001\001\000\004\014\300\001\001\000\002\001" +
    "\001\000\006\023\242\024\302\001\001\000\004\023\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\307\001\001\000\002\001\001\000\004" +
    "\026\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\u0127" +
    "\030\u0129\001\001\000\004\030\u019c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u012c" +
    "\013\120\001\001\000\002\001\001\000\006\015\u012e\017" +
    "\u0130\001\001\000\004\017\u0190\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u0175\013" +
    "\120\001\001\000\006\011\u0135\013\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u0137\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\u014f\014\233" +
    "\001\001\000\002\001\001\000\006\012\u013c\014\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\147" +
    "\001\001\000\002\001\001\000\004\025\u0167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u0177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\147\001\001\000\002\001\001\000" +
    "\004\025\u0181\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\147\001\001\000\006\015\u0195\017\u0130\001\001" +
    "\000\004\017\u0190\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\147\001\001\000\006\016\u01a1" +
    "\030\u0129\001\001\000\004\030\u019c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u01ad\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u01b0\010\101\001\001\000\004\010\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    
    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);       
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }   
  
    public void escribir_fichero(String texto, String nombre) throws IOException {
        String ruta = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";
        File archivo = new File(ruta);
        BufferedWriter bw;
        if (archivo.createNewFile()) {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        }
        bw.close();

    }
    public int contador = 0;

    public void grafico(String nombre) {
        try {

            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            String fileInputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";

            String fileOutputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".jpg";
            String tParam = "-Tjpg";
            String tOParam = "-o";
            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;
            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }  

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {







  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // L_PAR ::= identificador 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new NodoA("L_PARAMETROS");
    RESULT.getListaDehojas().add(new NodoA(id));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // L_PAR ::= L_PAR coma identificador 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = val;
    RESULT.getListaDehojas().add(new NodoA(id));
    
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= identificador 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new NodoA("E");
    RESULT.getListaDehojas().add(new NodoA(id));
    
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= numero 
            {
              NodoA RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new NodoA("E");
    RESULT.getListaDehojas().add(new NodoA(num));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= cadena 
            {
              NodoA RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new NodoA("E");
    
    RESULT.getListaDehojas().add(new NodoA(cad.substring(1, cad.length()-1)));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LISTA_ID ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = id;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTA_ID ::= otro_simb 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = si;
       
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LISTA_ID ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = num;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // L_ID ::= LISTA_ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val; 
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ID",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // L_ID ::= L_ID LISTA_ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    
        RESULT = val + " " + id;
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ID",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONT_COL ::= menor pr_boton mayor menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA("valor por defecto"));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONT_COL ::= menor pr_boton texto menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONT_COL ::= menor pr_boton L_AT2 p_coma mayor menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(val);
        //agregar el nombre por defecto
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONT_COL ::= menor pr_boton L_AT2 p_coma texto menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONT_COL ::= menor pr_imagen mayor menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        //agregar la imagen de no se encontro imagen
        
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONT_COL ::= menor pr_imagen texto menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONT_COL ::= menor pr_imagen L_AT2 p_coma mayor menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(val);
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONT_COL ::= menor pr_imagen L_AT2 p_coma texto menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONT_FIL ::= menor pr_ct L_AT p_coma mayor CONT_COL menor pr_finct mayor 
            {
              NodoA RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA atr = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(cont);
            RESULT.getListaDehojas().add(atr);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONT_FIL ::= menor pr_ct L_AT p_coma mayor menor pr_finct mayor 
            {
              NodoA RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA atr = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(atr);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONT_FIL ::= menor pr_ct L_AT p_coma texto menor pr_finct mayor 
            {
              NodoA RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA atr = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(new NodoA(cont.substring(1, cont.length())));
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONT_FIL ::= menor pr_ct texto menor pr_finct mayor 
            {
              NodoA RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(new NodoA(cont.substring(1, cont.length())));
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONT_FIL ::= menor pr_ct mayor menor pr_finct mayor 
            {
              NodoA RESULT =null;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONT_FIL ::= menor pr_ct mayor CONT_COL menor pr_finct mayor 
            {
              NodoA RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(cont);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONT_FIL ::= menor pr_cb mayor menor pr_fincb mayor 
            {
              NodoA RESULT =null;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONT_FIL ::= menor pr_cb texto menor pr_fincb mayor 
            {
              NodoA RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(new NodoA(cont.substring(1, cont.length())));
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONT_FIL ::= menor pr_cb mayor CONT_COL menor pr_fincb mayor 
            {
              NodoA RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(cont);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONT_FIL ::= menor pr_cb L_AT p_coma mayor menor pr_fincb mayor 
            {
              NodoA RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA atr = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(atr);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONT_FIL ::= menor pr_cb L_AT p_coma texto menor pr_fincb mayor 
            {
              NodoA RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA atr = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(new NodoA(cont.substring(1, cont.length())));
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONT_FIL ::= menor pr_cb L_AT p_coma mayor CONT_COL menor pr_fincb mayor 
            {
              NodoA RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA atr = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(cont);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CU_FIL ::= CONT_FIL 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU_FIL");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU_FIL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CU_FIL ::= CU_FIL CONT_FIL 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA id = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = val;
            RESULT.getListaDehojas().add(id);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU_FIL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUERPO_TABLA ::= menor pr_fil_t mayor menor pr_finfil_t mayor 
            {
              NodoA RESULT =null;
		
            RESULT = new NodoA("CUERPO_TABLA");
            
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CUERPO_TABLA ::= menor pr_fil_t mayor CU_FIL menor pr_finfil_t mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CUERPO_TABLA");
            RESULT.getListaDehojas().add(val);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CUERPO_TABLA ::= menor pr_fil_t L_AT p_coma mayor CU_FIL menor pr_finfil_t mayor 
            {
              NodoA RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA atr = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CUERPO_TABLA");
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(val);
            

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CU_T ::= CUERPO_TABLA 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
        RESULT = new NodoA("CU_T");
        RESULT.getListaDehojas().add(val);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU_T",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CU_T ::= CU_T CUERPO_TABLA 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA cuerpo = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(cuerpo);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU_T",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L_ATRIBUTOS2 ::= pr_alineado igual E 
            {
              NodoA RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Alineado"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L_ATRIBUTOS2 ::= pr_ancho igual E 
            {
              NodoA RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Ancho"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L_ATRIBUTOS2 ::= pr_alto igual E 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("alto"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // L_ATRIBUTOS2 ::= pr_grupo igual E 
            {
              NodoA RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object grupo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("grupo"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L_ATRIBUTOS2 ::= pr_id igual E 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("ID"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L_ATRIBUTOS2 ::= pr_ruta igual E 
            {
              NodoA RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ruta = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Ruta"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            

            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L_ATRIBUTOS2 ::= pr_click igual E 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Click"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new NodoA("("));
            RESULT.getListaDehojas().add(new NodoA(")"));

            

            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L_ATRIBUTOS ::= pr_alineado igual E 
            {
              NodoA RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("Alineado"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L_ATRIBUTOS ::= pr_ancho igual E 
            {
              NodoA RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("Ancho"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L_ATRIBUTOS ::= pr_alto igual E 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("alto"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L_ATRIBUTOS ::= pr_grupo igual E 
            {
              NodoA RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object grupo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("grupo"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L_ATRIBUTOS ::= pr_id igual E 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("ID"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L_ATRIBUTOS ::= pr_click igual E 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("Click"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
           

            

            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // L_AT2 ::= L_ATRIBUTOS2 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_AT2");
            RESULT.getListaDehojas().add(val);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_AT2",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // L_AT2 ::= L_AT2 p_coma L_ATRIBUTOS2 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA hijo = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = val;
            RESULT.getListaDehojas().add(new NodoA(";"));
            RESULT.getListaDehojas().add(hijo);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_AT2",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // L_AT ::= L_ATRIBUTOS 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_AT");
            RESULT.getListaDehojas().add(val);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_AT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L_AT ::= L_AT p_coma L_ATRIBUTOS 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA hijo = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(new NodoA(";"));
        RESULT.getListaDehojas().add(hijo);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_AT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NUEVO ::= menor pr_opcion pr_valor igual E p_coma texto menor pr_finopcion mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("NUEVO");
            RESULT.getListaDehojas().add(new NodoA("opcion"));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));

        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUEVO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NUEVO ::= menor pr_opcion pr_valor igual E p_coma mayor menor pr_finopcion mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
            RESULT = new NodoA("NUEVO");
            RESULT.getListaDehojas().add(new NodoA("opcion"));
            RESULT.getListaDehojas().add(val);
            
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUEVO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CAJA_OP ::= NUEVO 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = val;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAJA_OP",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CAJA_OP ::= CAJA_OP NUEVO 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA otro = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = val;
            RESULT.getListaDehojas().add(otro);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAJA_OP",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CU ::= menor pr_salto mayor 
            {
              NodoA RESULT =null;
		
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(new NodoA("salto"));
         

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CU ::= menor pr_spinner mayor menor pr_finspinner mayor 
            {
              NodoA RESULT =null;
		
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(new NodoA("Spinner "));
         
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CU ::= menor pr_spinner mayor numero menor pr_finspinner mayor 
            {
              NodoA RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(new NodoA("Spinner " + n));
         
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CU ::= menor pr_spinner L_AT p_coma mayor menor pr_finspinner mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(val);
         RESULT.getListaDehojas().add(new NodoA("salto"));
         
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CU ::= menor pr_spinner L_AT p_coma mayor numero menor pr_finspinner mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(val);
         RESULT.getListaDehojas().add(new NodoA("salto"));
         
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CU ::= menor pr_caja mayor CAJA_OP menor pr_fincaja mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("Caja"));
        RESULT.getListaDehojas().add(val);

         
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CU ::= menor pr_caja L_AT2 p_coma mayor CAJA_OP menor pr_fincaja mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("Caja"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cont);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CU ::= menor pr_texto_a mayor menor pr_fintexto_a mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CU ::= menor pr_texto_a texto menor pr_fintexto_a mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CU ::= menor pr_texto_a L_AT p_coma mayor menor pr_fintexto_a mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
        RESULT.getListaDehojas().add(val);
        

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CU ::= menor pr_texto_a L_AT p_coma texto menor pr_fintexto_a mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(cont.substring(1, cont.length())));

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CU ::= menor pr_tabla texto menor pr_fintabla mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CU ::= menor pr_tabla mayor menor pr_fintabla mayor 
            {
              NodoA RESULT =null;
		
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CU ::= menor pr_tabla mayor CU_T menor pr_fintabla mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        RESULT.getListaDehojas().add(val);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CU ::= menor pr_tabla L_AT p_coma mayor CU_T menor pr_fintabla mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cont);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CU ::= menor pr_enlace pr_ruta igual cadena p_coma mayor menor pr_finenlace mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("ENLACE "));
        //agregar el nombre de la ruta ya que no tiene otro nombre

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CU ::= menor pr_enlace pr_ruta igual cadena p_coma texto menor pr_finenlace mayor 
            {
              NodoA RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("ENLACE" + cad.substring(1, cad.length()-1)));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
       
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CU ::= menor pr_boton mayor menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA("valor por defecto"));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CU ::= menor pr_boton texto menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CU ::= menor pr_boton L_AT2 p_coma mayor menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(val);
        //agregar el nombre por defecto
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CU ::= menor pr_boton L_AT2 p_coma texto menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CU ::= menor pr_imagen mayor menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        //agregar la imagen de no se encontro imagen
        
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CU ::= menor pr_imagen texto menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CU ::= menor pr_imagen L_AT2 p_coma mayor menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(val);
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CU ::= menor pr_imagen L_AT2 p_coma texto menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CU ::= menor pr_caja_texto mayor menor pr_fincaja_texto mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CAJA_TEXTO"));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CU ::= menor pr_caja_texto texto menor pr_fincaja_texto mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CAJA_TEXTO"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CU ::= menor pr_caja_texto L_AT p_coma mayor menor pr_fincaja_texto mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CAJA_TEXTO"));
        RESULT.getListaDehojas().add(val);
        
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CU ::= menor pr_caja_texto L_AT p_coma texto menor pr_fincaja_texto mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CAJA_TEXTO"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CU ::= menor pr_texto texto menor pr_fintexto mayor 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CU ::= menor pr_texto mayor menor pr_fintexto mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CU ::= menor pr_texto L_AT p_coma mayor menor pr_fintexto mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        RESULT.getListaDehojas().add(val);
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CU ::= menor pr_texto L_AT p_coma texto menor pr_fintexto mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id.substring(1, id.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CU ::= menor pr_panel mayor menor pr_finpanel mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CU ::= menor pr_panel L_AT p_coma mayor menor pr_finpanel mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        RESULT.getListaDehojas().add(val);
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CU ::= menor pr_panel mayor CONT_C menor pr_finpanel mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        RESULT.getListaDehojas().add(val);
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CU ::= menor pr_panel L_AT p_coma mayor CONT_C menor pr_finpanel mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA valor = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(valor);
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONT_C ::= CU 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new NodoA("CONT_C");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_C",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONT_C ::= CONT_C CU 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA valor = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(valor);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_C",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // REP ::= menor pr_cjs pr_ruta igual cadena p_coma mayor menor pr_fincjs mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("PR_CJS"));
       
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // REP ::= menor pr_titulo mayor menor pr_fintitulo mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("TITULO"));
        
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // REP ::= menor pr_ccss pr_ruta igual cadena p_coma mayor menor pr_finccss mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("PR_CCSS"));
        
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // REP ::= menor pr_cjs pr_ruta igual cadena p_coma texto menor pr_fincjs mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("CJS"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // REP ::= menor pr_ccss pr_ruta igual cadena p_coma texto menor pr_finccss mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CCSS"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REP ::= menor pr_titulo texto menor pr_fintitulo mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("TITULO"));
        RESULT.getListaDehojas().add(new NodoA(val.substring(1, val.length())));
        
    
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONT_EN ::= REP 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new NodoA("CONT_EN");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_EN",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONT_EN ::= CONT_EN REP 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nuevoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nuevoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA nuevo = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(nuevo);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_EN",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= menor pr_cuerpo pr_fondo igual E p_coma mayor CONT_C menor pr_fincuerpo mayor 
            {
              NodoA RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val2 = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CUERPO");
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(val2);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= menor pr_cuerpo mayor CONT_C menor pr_fincuerpo mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CUERPO");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= menor pr_encabezado mayor CONT_EN menor pr_finencabezado mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("ENCABEZADO");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= ENCABEZADO CUERPO 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA cuerpo = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
         RESULT = new NodoA("CONTENIDO");
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cuerpo);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // H ::= menor pr_chtml mayor CONTENIDO menor pr_finchtml mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("H");
        RESULT.getListaDehojas().add(val);
        

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= H 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val;
        System.out.println(RESULT.getNombre() + "-----------");
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA start_val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

