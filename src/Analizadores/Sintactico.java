
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 19 23:44:45 CST 2018
//----------------------------------------------------

package Analizadores;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.lang.Math;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 19 23:44:45 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\021\004\000\002\022\011\000\002\020\011" +
    "\000\002\020\015\000\002\005\004\000\002\005\003\000" +
    "\002\007\011\000\002\007\015\000\002\007\015\000\002" +
    "\007\014\000\002\007\010\000\002\007\014\000\002\006" +
    "\004\000\002\006\003\000\002\010\013\000\002\010\011" +
    "\000\002\010\012\000\002\010\010\000\002\010\013\000" +
    "\002\010\010\000\002\010\011\000\002\010\013\000\002" +
    "\010\011\000\002\010\013\000\002\010\011\000\002\010" +
    "\013\000\002\010\011\000\002\010\015\000\002\010\014" +
    "\000\002\010\013\000\002\010\011\000\002\010\010\000" +
    "\002\010\013\000\002\010\012\000\002\010\011\000\002" +
    "\010\010\000\002\010\013\000\002\010\011\000\002\010" +
    "\013\000\002\010\012\000\002\010\011\000\002\010\010" +
    "\000\002\010\005\000\002\024\004\000\002\024\003\000" +
    "\002\023\014\000\002\023\015\000\002\011\005\000\002" +
    "\011\003\000\002\012\005\000\002\012\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\016" +
    "\004\000\002\016\003\000\002\030\013\000\002\030\011" +
    "\000\002\030\010\000\002\015\004\000\002\015\003\000" +
    "\002\017\013\000\002\017\011\000\002\017\011\000\002" +
    "\017\013\000\002\025\003\000\002\025\013\000\002\025" +
    "\011\000\002\025\013\000\002\025\011\000\002\031\004" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\004\005\005\001\002\000\004\002\000\001" +
    "\002\000\004\011\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\006\011\001\002\000" +
    "\004\005\014\001\002\000\004\005\101\001\002\000\004" +
    "\005\076\001\002\000\004\012\015\001\002\000\004\006" +
    "\016\001\002\000\004\005\021\001\002\000\004\005\ufff9" +
    "\001\002\000\004\005\073\001\002\000\010\013\022\014" +
    "\023\015\024\001\002\000\004\041\056\001\002\000\004" +
    "\041\042\001\002\000\004\006\025\001\002\000\012\005" +
    "\031\077\026\101\030\104\032\001\002\000\012\005\uffac" +
    "\077\uffac\101\uffac\104\uffac\001\002\000\012\005\uffad\077" +
    "\uffad\101\uffad\104\uffad\001\002\000\012\005\uffaa\077\uffaa" +
    "\101\uffaa\104\uffaa\001\002\000\004\055\040\001\002\000" +
    "\012\005\uffab\077\uffab\101\uffab\104\uffab\001\002\000\012" +
    "\005\035\077\026\101\030\104\032\001\002\000\012\005" +
    "\uffae\077\uffae\101\uffae\104\uffae\001\002\000\004\055\036" +
    "\001\002\000\004\006\037\001\002\000\004\005\ufff8\001" +
    "\002\000\004\006\041\001\002\000\004\005\ufff4\001\002" +
    "\000\004\007\043\001\002\000\004\102\044\001\002\000" +
    "\004\004\045\001\002\000\004\006\046\001\002\000\012" +
    "\005\047\077\026\101\030\104\032\001\002\000\004\054" +
    "\054\001\002\000\012\005\051\077\026\101\030\104\032" +
    "\001\002\000\004\054\052\001\002\000\004\006\053\001" +
    "\002\000\004\005\ufff7\001\002\000\004\006\055\001\002" +
    "\000\004\005\ufff5\001\002\000\004\007\057\001\002\000" +
    "\004\102\060\001\002\000\004\004\061\001\002\000\004" +
    "\006\062\001\002\000\012\005\063\077\026\101\030\104" +
    "\032\001\002\000\004\053\070\001\002\000\012\005\065" +
    "\077\026\101\030\104\032\001\002\000\004\053\066\001" +
    "\002\000\004\006\067\001\002\000\004\005\ufff6\001\002" +
    "\000\004\006\071\001\002\000\004\005\ufff3\001\002\000" +
    "\004\005\ufffa\001\002\000\012\013\022\014\023\015\024" +
    "\052\074\001\002\000\004\006\075\001\002\000\004\005" +
    "\ufffd\001\002\000\004\051\077\001\002\000\004\006\100" +
    "\001\002\000\004\002\uffff\001\002\000\004\016\103\001" +
    "\002\000\004\005\ufffe\001\002\000\006\006\105\021\104" +
    "\001\002\000\004\007\u0173\001\002\000\004\005\110\001" +
    "\002\000\004\005\u0170\001\002\000\004\005\ufff1\001\002" +
    "\000\030\017\123\020\115\022\114\023\113\024\112\025" +
    "\122\026\111\033\116\034\117\036\120\037\121\001\002" +
    "\000\020\006\u0116\040\133\042\124\043\132\044\127\045" +
    "\125\046\130\001\002\000\022\006\u010a\040\245\041\242" +
    "\042\236\043\244\044\240\045\235\046\243\001\002\000" +
    "\022\006\376\040\245\041\242\042\236\043\244\044\240" +
    "\045\235\046\243\001\002\000\020\006\362\040\133\042" +
    "\124\043\132\044\127\045\125\046\130\001\002\000\020" +
    "\006\343\040\133\042\124\043\132\044\127\045\125\046" +
    "\130\001\002\000\020\006\321\040\133\042\124\043\132" +
    "\044\127\045\125\046\130\001\002\000\022\006\246\040" +
    "\245\041\242\042\236\043\244\044\240\045\235\046\243" +
    "\001\002\000\020\006\214\040\133\042\124\043\132\044" +
    "\127\045\125\046\130\001\002\000\004\006\212\001\002" +
    "\000\004\041\176\001\002\000\020\006\134\040\133\042" +
    "\124\043\132\044\127\045\125\046\130\001\002\000\004" +
    "\007\174\001\002\000\004\007\172\001\002\000\004\004" +
    "\uffce\001\002\000\004\007\170\001\002\000\004\007\166" +
    "\001\002\000\004\004\154\001\002\000\004\007\152\001" +
    "\002\000\004\007\145\001\002\000\004\005\136\001\002" +
    "\000\004\005\142\001\002\000\032\017\123\020\115\022" +
    "\114\023\113\024\112\025\122\026\111\033\116\034\117" +
    "\036\120\037\121\057\137\001\002\000\004\006\140\001" +
    "\002\000\004\005\uffed\001\002\000\004\005\ufff2\001\002" +
    "\000\032\017\123\020\115\022\114\023\113\024\112\025" +
    "\122\026\111\033\116\034\117\036\120\037\121\057\143" +
    "\001\002\000\004\006\144\001\002\000\004\005\uffef\001" +
    "\002\000\010\077\146\101\150\102\147\001\002\000\004" +
    "\004\uffa8\001\002\000\004\004\uffa9\001\002\000\004\004" +
    "\uffa7\001\002\000\004\004\uffcb\001\002\000\010\077\146" +
    "\101\150\102\147\001\002\000\004\004\uffc9\001\002\000" +
    "\020\006\156\040\133\042\124\043\132\044\127\045\125" +
    "\046\130\001\002\000\004\004\uffcf\001\002\000\004\005" +
    "\160\001\002\000\004\005\163\001\002\000\032\017\123" +
    "\020\115\022\114\023\113\024\112\025\122\026\111\033" +
    "\116\034\117\036\120\037\121\057\161\001\002\000\004" +
    "\006\162\001\002\000\004\005\uffee\001\002\000\032\017" +
    "\123\020\115\022\114\023\113\024\112\025\122\026\111" +
    "\033\116\034\117\036\120\037\121\057\164\001\002\000" +
    "\004\006\165\001\002\000\004\005\ufff0\001\002\000\010" +
    "\077\146\101\150\102\147\001\002\000\004\004\uffc6\001" +
    "\002\000\010\077\146\101\150\102\147\001\002\000\004" +
    "\004\uffc8\001\002\000\010\077\146\101\150\102\147\001" +
    "\002\000\004\004\uffc7\001\002\000\010\077\146\101\150" +
    "\102\147\001\002\000\004\004\uffca\001\002\000\004\007" +
    "\177\001\002\000\004\102\200\001\002\000\004\004\201" +
    "\001\002\000\004\006\202\001\002\000\012\005\203\077" +
    "\026\101\030\104\032\001\002\000\004\064\210\001\002" +
    "\000\012\005\205\077\026\101\030\104\032\001\002\000" +
    "\004\064\206\001\002\000\004\006\207\001\002\000\004" +
    "\005\uffe3\001\002\000\004\006\211\001\002\000\004\005" +
    "\uffe2\001\002\000\004\005\uffd4\001\002\000\004\004\224" +
    "\001\002\000\006\005\216\077\215\001\002\000\004\005" +
    "\221\001\002\000\004\074\217\001\002\000\004\006\220" +
    "\001\002\000\004\005\uffd5\001\002\000\004\074\222\001" +
    "\002\000\004\006\223\001\002\000\004\005\uffd6\001\002" +
    "\000\020\006\225\040\133\042\124\043\132\044\127\045" +
    "\125\046\130\001\002\000\006\005\227\077\226\001\002" +
    "\000\004\005\232\001\002\000\004\074\230\001\002\000" +
    "\004\006\231\001\002\000\004\005\uffd7\001\002\000\004" +
    "\074\233\001\002\000\004\006\234\001\002\000\004\005" +
    "\uffd8\001\002\000\004\007\316\001\002\000\004\007\314" +
    "\001\002\000\004\004\305\001\002\000\004\007\303\001" +
    "\002\000\004\004\uffcc\001\002\000\004\007\301\001\002" +
    "\000\004\007\277\001\002\000\004\007\275\001\002\000" +
    "\004\007\273\001\002\000\004\005\251\001\002\000\004" +
    "\005\270\001\002\000\004\005\uffd2\001\002\000\004\035" +
    "\252\001\002\000\004\032\253\001\002\000\004\007\254" +
    "\001\002\000\010\077\146\101\150\102\147\001\002\000" +
    "\004\004\256\001\002\000\004\006\257\001\002\000\012" +
    "\005\260\077\026\101\030\104\032\001\002\000\004\073" +
    "\265\001\002\000\012\005\262\077\026\101\030\104\032" +
    "\001\002\000\004\073\263\001\002\000\004\006\264\001" +
    "\002\000\004\005\uffd0\001\002\000\004\006\266\001\002" +
    "\000\004\005\uffd1\001\002\000\004\005\uffd3\001\002\000" +
    "\006\035\252\072\271\001\002\000\004\006\272\001\002" +
    "\000\004\005\uffd9\001\002\000\010\077\146\101\150\102" +
    "\147\001\002\000\004\004\uffc5\001\002\000\010\077\146" +
    "\101\150\102\147\001\002\000\004\004\uffc2\001\002\000" +
    "\010\077\146\101\150\102\147\001\002\000\004\004\uffbf" +
    "\001\002\000\010\077\146\101\150\102\147\001\002\000" +
    "\004\004\uffc4\001\002\000\010\077\146\101\150\102\147" +
    "\001\002\000\004\004\uffc1\001\002\000\022\006\307\040" +
    "\245\041\242\042\236\043\244\044\240\045\235\046\243" +
    "\001\002\000\004\004\uffcd\001\002\000\004\005\251\001" +
    "\002\000\004\005\311\001\002\000\006\035\252\072\312" +
    "\001\002\000\004\006\313\001\002\000\004\005\uffda\001" +
    "\002\000\010\077\146\101\150\102\147\001\002\000\004" +
    "\004\uffc3\001\002\000\010\077\146\101\150\102\147\001" +
    "\002\000\004\004\uffc0\001\002\000\004\004\331\001\002" +
    "\000\012\005\322\077\026\101\030\104\032\001\002\000" +
    "\004\071\327\001\002\000\012\005\324\077\026\101\030" +
    "\104\032\001\002\000\004\071\325\001\002\000\004\006" +
    "\326\001\002\000\004\005\uffdc\001\002\000\004\006\330" +
    "\001\002\000\004\005\uffdb\001\002\000\020\006\332\040" +
    "\133\042\124\043\132\044\127\045\125\046\130\001\002" +
    "\000\012\005\333\077\026\101\030\104\032\001\002\000" +
    "\004\071\340\001\002\000\012\005\335\077\026\101\030" +
    "\104\032\001\002\000\004\071\336\001\002\000\004\006" +
    "\337\001\002\000\004\005\uffde\001\002\000\004\006\341" +
    "\001\002\000\004\005\uffdd\001\002\000\004\004\353\001" +
    "\002\000\012\005\344\077\026\101\030\104\032\001\002" +
    "\000\004\060\351\001\002\000\012\005\346\077\026\101" +
    "\030\104\032\001\002\000\004\060\347\001\002\000\004" +
    "\006\350\001\002\000\004\005\uffea\001\002\000\004\006" +
    "\352\001\002\000\004\005\uffeb\001\002\000\020\006\354" +
    "\040\133\042\124\043\132\044\127\045\125\046\130\001" +
    "\002\000\010\077\026\101\030\104\032\001\002\000\012" +
    "\005\356\077\026\101\030\104\032\001\002\000\004\060" +
    "\357\001\002\000\004\006\360\001\002\000\004\005\uffec" +
    "\001\002\000\004\004\367\001\002\000\010\077\026\101" +
    "\030\104\032\001\002\000\012\005\364\077\026\101\030" +
    "\104\032\001\002\000\004\061\365\001\002\000\004\006" +
    "\366\001\002\000\004\005\uffe8\001\002\000\020\006\370" +
    "\040\133\042\124\043\132\044\127\045\125\046\130\001" +
    "\002\000\010\077\026\101\030\104\032\001\002\000\012" +
    "\005\372\077\026\101\030\104\032\001\002\000\004\061" +
    "\373\001\002\000\004\006\374\001\002\000\004\005\uffe9" +
    "\001\002\000\004\004\u0103\001\002\000\010\077\026\101" +
    "\030\104\032\001\002\000\012\005\u0100\077\026\101\030" +
    "\104\032\001\002\000\004\062\u0101\001\002\000\004\006" +
    "\u0102\001\002\000\004\005\uffe6\001\002\000\022\006\u0104" +
    "\040\245\041\242\042\236\043\244\044\240\045\235\046" +
    "\243\001\002\000\010\077\026\101\030\104\032\001\002" +
    "\000\012\005\u0106\077\026\101\030\104\032\001\002\000" +
    "\004\062\u0107\001\002\000\004\006\u0108\001\002\000\004" +
    "\005\uffe7\001\002\000\004\004\u010f\001\002\000\010\077" +
    "\026\101\030\104\032\001\002\000\012\005\u010c\077\026" +
    "\101\030\104\032\001\002\000\004\063\u010d\001\002\000" +
    "\004\006\u010e\001\002\000\004\005\uffe4\001\002\000\022" +
    "\006\u0110\040\245\041\242\042\236\043\244\044\240\045" +
    "\235\046\243\001\002\000\010\077\026\101\030\104\032" +
    "\001\002\000\012\005\u0112\077\026\101\030\104\032\001" +
    "\002\000\004\063\u0113\001\002\000\004\006\u0114\001\002" +
    "\000\004\005\uffe5\001\002\000\004\004\u0169\001\002\000" +
    "\004\005\u0118\001\002\000\004\005\u0165\001\002\000\006" +
    "\027\u011b\065\u011a\001\002\000\004\005\uffbd\001\002\000" +
    "\004\006\u0164\001\002\000\020\006\u011d\040\133\042\124" +
    "\043\132\044\127\045\125\046\130\001\002\000\004\004" +
    "\u015d\001\002\000\004\005\u011f\001\002\000\004\005\u0159" +
    "\001\002\000\010\030\u0122\031\u0123\066\u0121\001\002\000" +
    "\004\005\uffb8\001\002\000\004\006\u0158\001\002\000\020" +
    "\006\u014d\040\133\042\124\043\132\044\127\045\125\046" +
    "\130\001\002\000\020\006\u0125\040\133\042\124\043\132" +
    "\044\127\045\125\046\130\001\002\000\004\004\u0146\001" +
    "\002\000\012\005\u0127\077\026\101\030\104\032\001\002" +
    "\000\004\005\u0143\001\002\000\006\023\u012a\024\u0129\001" +
    "\002\000\012\005\uffb3\077\026\101\030\104\032\001\002" +
    "\000\022\006\u0138\040\245\041\242\042\236\043\244\044" +
    "\240\045\235\046\243\001\002\000\022\006\u012c\040\245" +
    "\041\242\042\236\043\244\044\240\045\235\046\243\001" +
    "\002\000\004\004\u0131\001\002\000\010\077\026\101\030" +
    "\104\032\001\002\000\012\005\u012e\077\026\101\030\104" +
    "\032\001\002\000\004\062\u012f\001\002\000\004\006\u0130" +
    "\001\002\000\004\005\uffb1\001\002\000\022\006\u0132\040" +
    "\245\041\242\042\236\043\244\044\240\045\235\046\243" +
    "\001\002\000\010\077\026\101\030\104\032\001\002\000" +
    "\012\005\u0134\077\026\101\030\104\032\001\002\000\004" +
    "\062\u0135\001\002\000\004\006\u0136\001\002\000\004\005" +
    "\uffb2\001\002\000\004\004\u013d\001\002\000\010\077\026" +
    "\101\030\104\032\001\002\000\012\005\u013a\077\026\101" +
    "\030\104\032\001\002\000\004\063\u013b\001\002\000\004" +
    "\006\u013c\001\002\000\004\005\uffaf\001\002\000\022\006" +
    "\u013e\040\245\041\242\042\236\043\244\044\240\045\235" +
    "\046\243\001\002\000\010\077\026\101\030\104\032\001" +
    "\002\000\012\005\u0140\077\026\101\030\104\032\001\002" +
    "\000\004\063\u0141\001\002\000\004\006\u0142\001\002\000" +
    "\004\005\uffb0\001\002\000\004\070\u0144\001\002\000\004" +
    "\006\u0145\001\002\000\004\005\uffb5\001\002\000\020\006" +
    "\u0147\040\133\042\124\043\132\044\127\045\125\046\130" +
    "\001\002\000\012\005\u0127\077\026\101\030\104\032\001" +
    "\002\000\004\005\u0149\001\002\000\004\070\u014a\001\002" +
    "\000\004\006\u014b\001\002\000\004\005\uffb4\001\002\000" +
    "\004\004\u0152\001\002\000\012\005\u0127\077\026\101\030" +
    "\104\032\001\002\000\004\005\u014f\001\002\000\004\067" +
    "\u0150\001\002\000\004\006\u0151\001\002\000\004\005\uffb6" +
    "\001\002\000\020\006\u0153\040\133\042\124\043\132\044" +
    "\127\045\125\046\130\001\002\000\012\005\u0127\077\026" +
    "\101\030\104\032\001\002\000\004\005\u0155\001\002\000" +
    "\004\067\u0156\001\002\000\004\006\u0157\001\002\000\004" +
    "\005\uffb7\001\002\000\004\005\uffba\001\002\000\010\030" +
    "\u0122\031\u0123\066\u015b\001\002\000\004\005\uffb9\001\002" +
    "\000\004\006\u015c\001\002\000\004\005\uffbb\001\002\000" +
    "\020\006\u015e\040\133\042\124\043\132\044\127\045\125" +
    "\046\130\001\002\000\004\005\u0160\001\002\000\004\005" +
    "\u0161\001\002\000\006\030\u0122\031\u0123\001\002\000\010" +
    "\030\u0122\031\u0123\066\u0162\001\002\000\004\006\u0163\001" +
    "\002\000\004\005\uffbc\001\002\000\004\005\uffdf\001\002" +
    "\000\006\027\u011b\065\u0167\001\002\000\004\005\uffbe\001" +
    "\002\000\004\006\u0168\001\002\000\004\005\uffe0\001\002" +
    "\000\020\006\u016a\040\133\042\124\043\132\044\127\045" +
    "\125\046\130\001\002\000\004\005\u016c\001\002\000\004" +
    "\005\u016d\001\002\000\004\027\u011b\001\002\000\006\027" +
    "\u011b\065\u016e\001\002\000\004\006\u016f\001\002\000\004" +
    "\005\uffe1\001\002\000\032\017\123\020\115\022\114\023" +
    "\113\024\112\025\122\026\111\033\116\034\117\036\120" +
    "\037\121\056\u0171\001\002\000\004\006\u0172\001\002\000" +
    "\004\005\ufffc\001\002\000\010\077\146\101\150\102\147" +
    "\001\002\000\004\004\u0175\001\002\000\004\006\u0176\001" +
    "\002\000\004\005\110\001\002\000\004\005\u0178\001\002" +
    "\000\032\017\123\020\115\022\114\023\113\024\112\025" +
    "\122\026\111\033\116\034\117\036\120\037\121\056\u0179" +
    "\001\002\000\004\006\u017a\001\002\000\004\005\ufffb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\012\022\011\001\001\000" +
    "\004\020\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\017\007\016\001\001\000" +
    "\002\001\001\000\004\007\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\032\032\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\047\032" +
    "\026\001\001\000\002\001\001\000\004\032\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\063\032\026\001\001\000\002\001\001\000\004\032\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\105\010\106\001\001\000\004\010\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\u0114\013\125\001\001\000\006\012\u0108\014\240\001\001" +
    "\000\006\012\374\014\240\001\001\000\006\011\360\013" +
    "\125\001\001\000\006\011\341\013\125\001\001\000\006" +
    "\011\317\013\125\001\001\000\006\012\236\014\240\001" +
    "\001\000\006\011\212\013\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\130\013\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\134\010\106\001\001" +
    "\000\004\010\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\152\001\001\000\002\001" +
    "\001\000\004\013\154\001\001\000\002\001\001\000\006" +
    "\006\156\010\106\001\001\000\004\010\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\166\001\001\000\002\001\001\000\004\026\170\001\001" +
    "\000\002\001\001\000\004\026\172\001\001\000\002\001" +
    "\001\000\004\026\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\203\032\026\001\001\000\002\001\001" +
    "\000\004\032\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\247\024\246\001\001\000\004\023\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\260\032\026\001\001\000\002\001" +
    "\001\000\004\032\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\273\001\001\000\002\001" +
    "\001\000\004\026\275\001\001\000\002\001\001\000\004" +
    "\026\277\001\001\000\002\001\001\000\004\026\301\001" +
    "\001\000\002\001\001\000\004\026\303\001\001\000\002" +
    "\001\001\000\004\014\305\001\001\000\002\001\001\000" +
    "\006\023\247\024\307\001\001\000\004\023\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\314\001\001\000\002\001\001\000\004\026\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\322\032\026\001\001\000\002\001\001\000\004\032\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\154" +
    "\001\001\000\006\031\333\032\026\001\001\000\002\001" +
    "\001\000\004\032\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\344\032\026\001\001" +
    "\000\002\001\001\000\004\032\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\154\001\001\000\006\031" +
    "\354\032\026\001\001\000\004\032\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\362\032\026\001\001\000\004\032\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\154\001\001\000\006\031\370\032\026" +
    "\001\001\000\004\032\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\376\032\026\001\001\000\004\032\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\305\001\001\000\006\031\u0104\032\026\001\001\000" +
    "\004\032\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\u010a\032" +
    "\026\001\001\000\004\032\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\305\001" +
    "\001\000\006\031\u0110\032\026\001\001\000\004\032\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u0116\030\u0118\001\001" +
    "\000\004\030\u0165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\u011b\013\125\001\001" +
    "\000\002\001\001\000\006\015\u011d\017\u011f\001\001\000" +
    "\004\017\u0159\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\u014b\013\125\001\001\000" +
    "\006\011\u0123\013\125\001\001\000\002\001\001\000\010" +
    "\025\u0125\031\u0127\032\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\033\001\001\000\006\012\u0136" +
    "\014\240\001\001\000\006\012\u012a\014\240\001\001\000" +
    "\002\001\001\000\006\031\u012c\032\026\001\001\000\004" +
    "\032\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\305\001\001\000\006\031\u0132" +
    "\032\026\001\001\000\004\032\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\u0138\032\026\001\001\000\004\032\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\305\001\001\000\006\031\u013e\032\026\001" +
    "\001\000\004\032\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\154\001\001\000\010" +
    "\025\u0147\031\u0127\032\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\u014d\031\u0127\032\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\154\001\001\000\010\025\u0153\031" +
    "\u0127\032\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\154\001\001\000\006\015\u015e\017" +
    "\u011f\001\001\000\004\017\u0159\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\154\001\001\000" +
    "\006\016\u016a\030\u0118\001\001\000\004\030\u0165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u0173\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u0176\010\106\001\001\000\004" +
    "\010\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    
    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);       
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }   
  
    public void escribir_fichero(String texto, String nombre) throws IOException {
        String ruta = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";
        File archivo = new File(ruta);
        BufferedWriter bw;
        if (archivo.createNewFile()) {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        }
        bw.close();

    }
    public int contador = 0;

    public void grafico(String nombre) {
        try {

            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            String fileInputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";

            String fileOutputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".jpg";
            String tParam = "-Tjpg";
            String tOParam = "-o";
            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;
            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }  

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {







  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // L_PAR ::= identificador 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new NodoA("L_PARAMETROS");
    RESULT.getListaDehojas().add(new NodoA(id));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // L_PAR ::= L_PAR coma identificador 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = val;
    RESULT.getListaDehojas().add(new NodoA(id));
    
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= identificador 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new NodoA("E");
    RESULT.getListaDehojas().add(new NodoA(id));
    
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= numero 
            {
              NodoA RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT = new NodoA("E");
    RESULT.getListaDehojas().add(new NodoA(num));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= cadena 
            {
              NodoA RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
    RESULT = new NodoA("E");
    
    RESULT.getListaDehojas().add(new NodoA(cad.substring(1, cad.length()-1)));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTA_ID ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = id;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTA_ID ::= otro_simb 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = si;
       
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_ID ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = num;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // L_ID ::= LISTA_ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val; 
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ID",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L_ID ::= L_ID LISTA_ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    
        RESULT = val + " " + id;
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ID",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONT_COL ::= menor pr_boton mayor L_ID menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CONTENIDO_COLUMNA");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA(id));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONT_COL ::= menor pr_boton L_AT2 p_coma mayor L_ID menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA lista = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CONTENIDO_COLUMNA");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(lista);
        RESULT.getListaDehojas().add(new NodoA(id));


    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONT_COL ::= menor pr_imagen mayor L_ID menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CONTENIDO_COLUMNA");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(new NodoA(id));
        

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONT_COL ::= menor pr_imagen L_AT2 p_coma mayor L_ID menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA lista = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CONTENIDO_COLUMNA");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(lista);
        RESULT.getListaDehojas().add(new NodoA(id));

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONT_COL ::= L_ID 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new NodoA("CONTENIDO_COLUMNA");
        RESULT.getListaDehojas().add(new NodoA(id));

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONT_FIL ::= menor pr_ct L_AT p_coma mayor CONT_COL menor pr_finct mayor 
            {
              NodoA RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA atr = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(cont);
            RESULT.getListaDehojas().add(atr);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONT_FIL ::= menor pr_ct mayor CONT_COL menor pr_finct mayor 
            {
              NodoA RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CT"));
            RESULT.getListaDehojas().add(cont);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONT_FIL ::= menor pr_cb mayor CONT_COL menor pr_fincb mayor 
            {
              NodoA RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(cont);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONT_FIL ::= menor pr_cb L_AT p_coma mayor CONT_COL menor pr_fincb mayor 
            {
              NodoA RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA atr = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CONT_FIL");
            RESULT.getListaDehojas().add(new NodoA("CB"));
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(cont);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CU_FIL ::= CONT_FIL 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU_FIL");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU_FIL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CU_FIL ::= CU_FIL CONT_FIL 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA id = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = val;
            RESULT.getListaDehojas().add(id);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU_FIL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPO_TABLA ::= menor pr_fil_t mayor menor pr_finfil_t mayor 
            {
              NodoA RESULT =null;
		
            RESULT = new NodoA("CUERPO_TABLA");
            
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPO_TABLA ::= menor pr_fil_t mayor CU_FIL menor pr_finfil_t mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CUERPO_TABLA");
            RESULT.getListaDehojas().add(val);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPO_TABLA ::= menor pr_fil_t L_AT p_coma mayor CU_FIL menor pr_finfil_t mayor 
            {
              NodoA RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA atr = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("CUERPO_TABLA");
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(val);

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CU_T ::= CUERPO_TABLA 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
        RESULT = new NodoA("CU_T");
        RESULT.getListaDehojas().add(val);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU_T",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CU_T ::= CU_T CUERPO_TABLA 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA cuerpo = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(cuerpo);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU_T",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L_ATRIBUTOS2 ::= pr_alineado igual E 
            {
              NodoA RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Alineado"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L_ATRIBUTOS2 ::= pr_ancho igual E 
            {
              NodoA RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Ancho"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L_ATRIBUTOS2 ::= pr_alto igual E 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("alto"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L_ATRIBUTOS2 ::= pr_grupo igual E 
            {
              NodoA RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object grupo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("grupo"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L_ATRIBUTOS2 ::= pr_id igual E 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("ID"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // L_ATRIBUTOS2 ::= pr_ruta igual E 
            {
              NodoA RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ruta = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Ruta"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            

            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // L_ATRIBUTOS2 ::= pr_click igual E 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new NodoA("Click"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new NodoA("("));
            RESULT.getListaDehojas().add(new NodoA(")"));

            

            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // L_ATRIBUTOS ::= pr_alineado igual E 
            {
              NodoA RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("Alineado"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L_ATRIBUTOS ::= pr_ancho igual E 
            {
              NodoA RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("Ancho"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // L_ATRIBUTOS ::= pr_alto igual E 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("alto"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // L_ATRIBUTOS ::= pr_grupo igual E 
            {
              NodoA RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object grupo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("grupo"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // L_ATRIBUTOS ::= pr_id igual E 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("ID"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L_ATRIBUTOS ::= pr_click igual E 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new NodoA("Click"));
            RESULT.getListaDehojas().add(new NodoA("="));
            RESULT.getListaDehojas().add(val);
           

            

            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // L_AT2 ::= L_ATRIBUTOS2 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_AT2");
            RESULT.getListaDehojas().add(val);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_AT2",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L_AT2 ::= L_AT2 p_coma L_ATRIBUTOS2 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA hijo = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = val;
            RESULT.getListaDehojas().add(new NodoA(";"));
            RESULT.getListaDehojas().add(hijo);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_AT2",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L_AT ::= L_ATRIBUTOS 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new NodoA("L_AT");
            RESULT.getListaDehojas().add(val);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_AT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L_AT ::= L_AT p_coma L_ATRIBUTOS 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA hijo = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(new NodoA(";"));
        RESULT.getListaDehojas().add(hijo);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_AT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NUEVO ::= menor pr_opcion pr_valor igual E p_coma mayor L_ID menor pr_finopcion mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("NUEVO");
            RESULT.getListaDehojas().add(new NodoA("opcion"));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new NodoA(id));

        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUEVO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NUEVO ::= menor pr_opcion pr_valor igual E p_coma mayor menor pr_finopcion mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
            RESULT = new NodoA("NUEVO");
            RESULT.getListaDehojas().add(new NodoA("opcion"));
            RESULT.getListaDehojas().add(val);
            
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUEVO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CAJA_OP ::= NUEVO 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = val;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAJA_OP",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CAJA_OP ::= CAJA_OP NUEVO 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA otro = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = val;
            RESULT.getListaDehojas().add(otro);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAJA_OP",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CU ::= menor pr_salto mayor 
            {
              NodoA RESULT =null;
		
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(new NodoA("salto"));
         

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CU ::= menor pr_spinner mayor menor pr_finspinner mayor 
            {
              NodoA RESULT =null;
		
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(new NodoA("Spinner "));
         
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CU ::= menor pr_spinner mayor numero menor pr_finspinner mayor 
            {
              NodoA RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(new NodoA("Spinner " + n));
         
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CU ::= menor pr_spinner L_AT p_coma mayor menor pr_finspinner mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(val);
         RESULT.getListaDehojas().add(new NodoA("salto"));
         
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CU ::= menor pr_spinner L_AT p_coma mayor numero menor pr_finspinner mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		
         RESULT = new NodoA("CU");
         RESULT.getListaDehojas().add(val);
         RESULT.getListaDehojas().add(new NodoA("salto"));
         
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CU ::= menor pr_caja mayor CAJA_OP menor pr_fincaja mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("Caja"));
        RESULT.getListaDehojas().add(val);

         
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CU ::= menor pr_caja L_AT2 p_coma mayor CAJA_OP menor pr_fincaja mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("Caja"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cont);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CU ::= menor pr_texto_a mayor menor pr_fintexto_a mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
        

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CU ::= menor pr_texto_a mayor L_ID menor pr_fintexto_a mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
        RESULT.getListaDehojas().add(new NodoA(val));

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CU ::= menor pr_texto_a L_AT p_coma mayor menor pr_fintexto_a mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
        RESULT.getListaDehojas().add(val);
        

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CU ::= menor pr_texto_a L_AT p_coma mayor L_ID menor pr_fintexto_a mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO_A"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(cont));

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CU ::= menor pr_tabla mayor menor pr_fintabla mayor 
            {
              NodoA RESULT =null;
		
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CU ::= menor pr_tabla mayor CU_T menor pr_fintabla mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        RESULT.getListaDehojas().add(val);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CU ::= menor pr_tabla L_AT p_coma mayor CU_T menor pr_fintabla mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA cont = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TABLA"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cont);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CU ::= menor pr_enlace pr_ruta igual cadena p_coma mayor menor pr_finenlace mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("ENLACE "));
        

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CU ::= menor pr_enlace pr_ruta igual cadena p_coma mayor L_ID menor pr_finenlace mayor 
            {
              NodoA RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("ENLACE" + cad.substring(1, cad.length()-1)));
        RESULT.getListaDehojas().add(new NodoA(val));
       
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CU ::= menor pr_boton mayor L_ID menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA(val));
        

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CU ::= menor pr_boton L_AT2 p_coma mayor L_ID menor pr_finboton mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CU ::= menor pr_imagen mayor L_ID menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("BOTON"));
        RESULT.getListaDehojas().add(new NodoA(val));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CU ::= menor pr_imagen L_AT2 p_coma mayor L_ID menor pr_finimagen mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("IMAGEN"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CU ::= menor pr_caja_texto mayor L_ID menor pr_fincaja_texto mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CAJA_TEXTO"));
        RESULT.getListaDehojas().add(new NodoA(val));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CU ::= menor pr_caja_texto L_AT p_coma mayor L_ID menor pr_fincaja_texto mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CAJA_TEXTO"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CU ::= menor pr_texto mayor L_ID menor pr_fintexto mayor 
            {
              NodoA RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        RESULT.getListaDehojas().add(new NodoA(id));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CU ::= menor pr_texto mayor menor pr_fintexto mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CU ::= menor pr_texto L_AT p_coma mayor L_ID menor pr_fintexto mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("TEXTO"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new NodoA(id));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CU ::= menor pr_panel mayor menor pr_finpanel mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CU ::= menor pr_panel L_AT p_coma mayor menor pr_finpanel mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        RESULT.getListaDehojas().add(val);
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CU ::= menor pr_panel mayor CONT_C menor pr_finpanel mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        RESULT.getListaDehojas().add(val);
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CU ::= menor pr_panel L_AT p_coma mayor CONT_C menor pr_finpanel mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA valor = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("PANEL"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(valor);
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONT_C ::= CU 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new NodoA("CONT_C");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_C",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONT_C ::= CONT_C CU 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA valor = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(valor);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_C",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // REP ::= menor pr_cjs pr_ruta igual cadena p_coma mayor menor pr_fincjs mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("PR_CJS"));
       
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // REP ::= menor pr_titulo mayor menor pr_fintitulo mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("TITULO"));
        
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // REP ::= menor pr_ccss pr_ruta igual cadena p_coma mayor menor pr_finccss mayor 
            {
              NodoA RESULT =null;
		
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("PR_CCSS"));
        
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // REP ::= menor pr_cjs pr_ruta igual cadena p_coma mayor L_ID menor pr_fincjs mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("CJS"));
        RESULT.getListaDehojas().add(new NodoA(val));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // REP ::= menor pr_ccss pr_ruta igual cadena p_coma mayor L_ID menor pr_finccss mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CU");
        RESULT.getListaDehojas().add(new NodoA("CCSS"));
        RESULT.getListaDehojas().add(new NodoA(val));
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REP ::= menor pr_titulo mayor L_ID menor pr_fintitulo mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("REP");
        RESULT.getListaDehojas().add(new NodoA("TITULO"));
        RESULT.getListaDehojas().add(new NodoA(val));
        
    
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONT_EN ::= REP 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new NodoA("CONT_EN");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_EN",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONT_EN ::= CONT_EN REP 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nuevoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nuevoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA nuevo = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(nuevo);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_EN",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= menor pr_cuerpo pr_fondo igual E p_coma mayor CONT_C menor pr_fincuerpo mayor 
            {
              NodoA RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		NodoA val2 = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CUERPO");
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(val2);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= menor pr_cuerpo mayor CONT_C menor pr_fincuerpo mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("CUERPO");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= menor pr_encabezado mayor CONT_EN menor pr_finencabezado mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new NodoA("ENCABEZADO");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= ENCABEZADO CUERPO 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA cuerpo = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
         RESULT = new NodoA("CONTENIDO");
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cuerpo);
        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // H ::= menor pr_chtml mayor CONTENIDO menor pr_finchtml mayor 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT = new NodoA("H");
        RESULT.getListaDehojas().add(val);
        

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= H 
            {
              NodoA RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoA val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = val;
        System.out.println(RESULT.getNombre() + "-----------");
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoA start_val = (NodoA)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

