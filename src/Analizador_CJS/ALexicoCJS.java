/* The following code was generated by JFlex 1.6.1 */

package Analizador_CJS;
import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analizador_CJS/lexicocjs.jflex</tt>
 */
public class ALexicoCJS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int MULTI = 4;
  public static final int STRING_CENTRO = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 48, 45, 47, 46, 46,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    48,  9,  5,  0,  0,  0, 12,  6, 16, 17, 23, 21, 20, 22,  2,  7, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 19, 18, 11,  8, 10,  0, 
     0, 31, 41, 38, 39, 34, 36,  3,  3, 27, 44,  3, 43, 33, 28, 29, 
    30,  3, 32, 25, 35, 37, 40,  3, 42,  3,  3,  0,  0,  0,  0,  4, 
     0, 31, 41, 38, 39, 34, 36,  3,  3, 27, 44,  3, 43, 33, 28, 29, 
    30,  3, 32, 25, 35, 37, 40,  3, 42,  3,  3, 14, 13, 15,  0,  0, 
     0,  0,  0,  0,  0, 47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\2\1\1\5\1\1"+
    "\1\6\1\7\1\10\2\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\1\1\4"+
    "\1\1\11\4\1\23\1\24\1\25\2\26\1\0\1\4"+
    "\1\0\1\27\2\0\1\30\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\0\1\41"+
    "\1\4\1\0\5\4\1\0\5\4\1\0\3\4\1\42"+
    "\1\2\3\0\1\43\3\0\3\4\1\0\1\4\1\0"+
    "\5\4\1\0\4\4\1\0\1\4\1\0\4\4\2\0"+
    "\1\44\2\0\1\44\2\4\1\0\1\4\1\0\2\4"+
    "\1\45\2\4\1\0\1\4\1\0\3\4\2\46\2\47"+
    "\3\4\4\0\2\4\1\0\1\4\1\0\4\4\1\0"+
    "\1\4\1\0\1\4\1\0\5\4\1\50\3\0\2\4"+
    "\1\0\1\4\1\0\2\4\1\51\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\52\3\4\1\53\2\0"+
    "\2\4\1\0\1\4\1\0\1\4\1\54\1\4\1\0"+
    "\1\4\2\55\2\56\1\4\1\57\1\60\2\0\2\4"+
    "\2\61\1\0\1\4\1\62\2\63\1\4\2\0\2\4"+
    "\1\0\1\4\1\64\1\0\1\65\1\4\1\65\2\66"+
    "\2\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\304\0\u0126"+
    "\0\u0157\0\u0188\0\304\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\304\0\304\0\304\0\304\0\304\0\304\0\304"+
    "\0\u02df\0\u0310\0\304\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\304"+
    "\0\304\0\304\0\304\0\u058d\0\u05be\0\u05ef\0\u0620\0\304"+
    "\0\u0651\0\u0682\0\304\0\u06b3\0\304\0\304\0\304\0\304"+
    "\0\304\0\304\0\304\0\304\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87"+
    "\0\304\0\u05be\0\u0ab8\0\u0ae9\0\u0b1a\0\304\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014"+
    "\0\u1045\0\u1076\0\304\0\u10a7\0\u10d8\0\u0126\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u0126\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\304\0\u0126"+
    "\0\304\0\u0126\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\304\0\u18e2\0\u1913\0\u1944"+
    "\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u0126"+
    "\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u0126"+
    "\0\u1c23\0\u1c54\0\u1c85\0\304\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49"+
    "\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u0126\0\u1e3e\0\u1e6f\0\u1ea0"+
    "\0\304\0\u0126\0\304\0\u0126\0\u1ed1\0\u0126\0\u0126\0\u1f02"+
    "\0\u1f33\0\u1f64\0\u1f95\0\304\0\u0126\0\u1fc6\0\u1ff7\0\u0126"+
    "\0\304\0\u0126\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d"+
    "\0\u214e\0\u0126\0\u217f\0\304\0\u21b0\0\u0126\0\304\0\u0126"+
    "\0\304\0\u0126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\5\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\10\1\40\1\41\1\42"+
    "\1\43\1\44\2\10\1\45\1\10\1\46\1\47\5\10"+
    "\2\50\1\0\1\50\55\51\1\52\3\51\7\53\1\54"+
    "\45\53\2\50\1\0\1\53\55\5\2\50\1\0\1\50"+
    "\62\0\1\6\1\55\57\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\22\10\4\0\5\57\1\60\35\57\1\61"+
    "\1\62\14\57\6\0\1\63\1\64\61\0\1\65\60\0"+
    "\1\66\60\0\1\67\60\0\1\70\64\0\1\71\61\0"+
    "\1\72\70\0\1\73\61\0\1\74\64\0\2\75\6\0"+
    "\1\76\17\0\1\56\1\0\2\10\24\0\1\10\1\75"+
    "\1\77\6\10\1\100\12\10\45\0\1\101\20\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\6\10\1\102\13\10"+
    "\5\0\1\56\1\0\2\10\24\0\1\10\1\0\16\10"+
    "\1\103\3\10\5\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\0\4\10\1\104\15\10\5\0\1\56\1\0\2\10"+
    "\24\0\1\10\1\0\10\10\1\105\11\10\5\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\7\10\1\106\12\10"+
    "\5\0\1\56\1\0\2\10\24\0\1\10\1\107\1\110"+
    "\6\10\1\111\12\10\5\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\12\10\1\112\7\10\5\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\2\10\1\113\1\10\1\114"+
    "\15\10\5\0\1\56\1\0\2\10\24\0\1\10\1\115"+
    "\1\116\1\10\1\117\4\10\1\120\12\10\12\0\1\121"+
    "\53\0\1\122\60\0\1\56\1\123\2\10\24\0\1\10"+
    "\1\0\22\10\4\0\5\57\1\60\60\57\1\60\32\57"+
    "\1\124\25\57\1\60\31\57\1\125\21\57\6\0\1\126"+
    "\106\0\1\127\67\0\1\130\7\0\1\131\6\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\1\10\1\132\20\10"+
    "\5\0\1\56\1\0\2\10\24\0\1\10\1\0\10\10"+
    "\1\133\7\10\1\134\1\10\42\0\1\135\23\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\3\10\1\136\16\10"+
    "\5\0\1\56\1\0\2\10\23\0\1\137\1\140\1\0"+
    "\10\10\1\141\11\10\5\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\5\10\1\142\14\10\5\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\7\10\1\143\12\10\5\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\10\10\1\144"+
    "\11\10\46\0\1\145\17\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\7\10\1\146\12\10\5\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\1\10\1\147\20\10\5\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\1\10\1\150"+
    "\20\10\5\0\1\56\1\0\2\10\24\0\1\10\1\0"+
    "\1\10\1\151\20\10\5\0\1\56\1\0\2\10\23\0"+
    "\1\152\1\153\1\0\22\10\45\0\1\154\20\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\6\10\1\155\13\10"+
    "\5\0\1\56\1\0\2\10\24\0\1\10\1\0\13\10"+
    "\1\156\6\10\5\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\0\10\10\1\157\1\160\10\10\5\0\1\10\57\0"+
    "\5\57\1\60\37\57\1\161\20\57\1\60\45\57\1\162"+
    "\5\57\35\0\1\163\65\0\1\164\60\0\1\165\17\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\2\10\1\166"+
    "\17\10\5\0\1\56\1\0\2\10\24\0\1\10\1\0"+
    "\7\10\1\167\12\10\5\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\7\10\1\170\12\10\44\0\1\171\21\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\5\10\1\172"+
    "\14\10\46\0\1\173\17\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\7\10\1\174\12\10\5\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\7\10\1\175\12\10\5\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\4\10\1\176"+
    "\15\10\5\0\1\56\1\0\2\10\24\0\1\10\1\0"+
    "\17\10\1\177\2\10\5\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\2\10\1\200\17\10\40\0\1\201\25\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\1\10\1\202"+
    "\20\10\5\0\1\56\1\0\2\10\23\0\1\203\1\204"+
    "\1\0\22\10\5\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\0\13\10\1\205\6\10\5\0\1\56\1\0\2\10"+
    "\24\0\1\10\1\0\10\10\1\206\11\10\41\0\1\207"+
    "\24\0\1\56\1\0\2\10\24\0\1\10\1\0\2\10"+
    "\1\210\17\10\54\0\1\211\11\0\1\56\1\0\2\10"+
    "\24\0\1\10\1\0\15\10\1\212\4\10\5\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\12\10\1\213\7\10"+
    "\5\0\1\56\1\0\2\10\24\0\1\10\1\0\7\10"+
    "\1\214\12\10\5\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\0\7\10\1\215\12\10\4\0\5\57\1\60\34\57"+
    "\1\216\23\57\1\60\22\57\2\217\27\57\53\0\1\220"+
    "\53\0\1\221\13\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\0\20\10\1\222\1\10\5\0\1\56\1\0\2\10"+
    "\24\0\1\10\1\0\13\10\1\223\6\10\36\0\2\224"+
    "\26\0\1\56\1\0\2\10\24\0\1\10\1\224\1\225"+
    "\21\10\44\0\1\226\21\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\5\10\1\227\14\10\5\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\1\10\1\230\20\10\5\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\10\10\1\231"+
    "\11\10\5\0\1\56\1\0\2\10\24\0\1\10\1\0"+
    "\5\10\1\232\14\10\47\0\1\233\16\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\10\10\1\234\11\10\43\0"+
    "\1\235\22\0\1\56\1\0\2\10\24\0\1\10\1\0"+
    "\4\10\1\236\15\10\5\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\237\1\240\21\10\5\0\1\56\1\0\2\10"+
    "\24\0\1\10\1\0\7\10\1\241\12\10\5\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\6\10\1\242\13\10"+
    "\5\0\1\56\1\0\2\10\24\0\1\10\1\0\1\10"+
    "\1\243\20\10\5\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\0\13\10\1\244\6\10\4\0\5\57\1\245\60\57"+
    "\1\60\34\57\1\246\16\57\42\0\1\247\64\0\1\250"+
    "\13\0\1\56\1\0\2\10\24\0\1\10\1\0\7\10"+
    "\1\251\12\10\5\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\0\13\10\1\252\6\10\45\0\1\253\20\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\6\10\1\254\13\10"+
    "\54\0\1\255\11\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\0\15\10\1\256\4\10\5\0\1\56\1\0\2\10"+
    "\24\0\1\10\1\0\7\10\1\257\12\10\5\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\2\10\1\260\17\10"+
    "\5\0\1\56\1\0\2\10\24\0\1\10\1\0\1\10"+
    "\1\261\20\10\44\0\1\262\21\0\1\56\1\0\2\10"+
    "\24\0\1\10\1\0\5\10\1\263\14\10\60\0\1\264"+
    "\5\0\1\56\1\0\2\10\24\0\1\10\1\0\21\10"+
    "\1\265\41\0\1\266\24\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\2\10\1\267\17\10\5\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\2\10\1\270\17\10\5\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\7\10\1\271"+
    "\12\10\5\0\1\56\1\0\2\10\24\0\1\10\1\0"+
    "\7\10\1\272\12\10\5\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\10\10\1\273\11\10\4\0\5\57\1\274"+
    "\53\57\41\0\1\275\51\0\2\276\26\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\6\10\1\277\13\10\5\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\276\1\300\21\10"+
    "\36\0\2\301\26\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\301\1\302\21\10\43\0\1\303\22\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\4\10\1\304\15\10\5\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\5\10\1\305"+
    "\14\10\5\0\1\56\1\0\2\10\24\0\1\10\1\0"+
    "\4\10\1\306\15\10\43\0\1\307\22\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\4\10\1\310\15\10\46\0"+
    "\1\311\17\0\1\56\1\0\2\10\24\0\1\10\1\0"+
    "\7\10\1\312\12\10\40\0\1\313\25\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\1\10\1\314\20\10\5\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\1\10\1\315"+
    "\20\10\5\0\1\56\1\0\2\10\24\0\1\10\1\0"+
    "\5\10\1\316\14\10\5\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\2\10\1\317\17\10\46\0\1\320\53\0"+
    "\1\321\24\0\1\56\1\0\2\10\24\0\1\10\1\0"+
    "\7\10\1\322\12\10\5\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\2\10\1\323\17\10\44\0\1\324\21\0"+
    "\1\56\1\0\2\10\24\0\1\10\1\0\5\10\1\325"+
    "\14\10\53\0\1\326\12\0\1\56\1\0\2\10\24\0"+
    "\1\10\1\0\14\10\1\327\5\10\5\0\1\56\1\0"+
    "\2\10\24\0\1\10\1\0\5\10\1\330\14\10\34\0"+
    "\2\331\30\0\1\56\1\0\2\10\23\0\1\331\1\332"+
    "\1\0\22\10\5\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\0\10\10\1\333\11\10\40\0\1\334\60\0\1\335"+
    "\25\0\1\56\1\0\2\10\24\0\1\10\1\0\1\10"+
    "\1\336\20\10\5\0\1\56\1\0\2\10\24\0\1\10"+
    "\1\0\1\10\1\337\20\10\41\0\1\340\24\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\2\10\1\341\17\10"+
    "\5\0\1\56\1\0\2\10\24\0\1\10\1\0\2\10"+
    "\1\342\17\10\47\0\1\343\54\0\1\344\22\0\1\56"+
    "\1\0\2\10\24\0\1\10\1\0\10\10\1\345\11\10"+
    "\5\0\1\56\1\0\2\10\24\0\1\10\1\0\4\10"+
    "\1\346\15\10\44\0\1\347\21\0\1\56\1\0\2\10"+
    "\24\0\1\10\1\0\5\10\1\350\14\10\41\0\1\351"+
    "\24\0\1\56\1\0\2\10\24\0\1\10\1\0\2\10"+
    "\1\352\17\10\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8673];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\3\1\1\11\6\1\7\11"+
    "\2\1\1\11\14\1\4\11\1\1\1\0\1\1\1\0"+
    "\1\11\2\0\1\11\1\0\10\11\1\1\1\0\2\1"+
    "\1\0\5\1\1\0\5\1\1\0\3\1\1\11\1\1"+
    "\3\0\1\11\3\0\3\1\1\0\1\1\1\0\5\1"+
    "\1\0\4\1\1\0\1\1\1\0\4\1\2\0\1\11"+
    "\2\0\3\1\1\0\1\1\1\0\5\1\1\0\1\1"+
    "\1\0\3\1\1\11\1\1\1\11\4\1\4\0\2\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\1\11\3\0\2\1\1\0\1\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\5\1\1\11"+
    "\2\0\2\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\1\1\1\11\4\1\2\0\2\1\1\11\1\1"+
    "\1\0\2\1\1\11\2\1\2\0\2\1\1\0\2\1"+
    "\1\0\1\11\2\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String colector_cadena = "";
public String comentario = "";
//public ArrayList<Nodo_Error> Listado_Errores;  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ALexicoCJS(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosCJS.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("simbolo: <<"+yytext()+">> ["+yyline+" , "+yycolumn+"]");
            return new Symbol(SimbolosCJS.ptodo, yycolumn, yyline, yytext());
             //Listado_Errores.add(new Nodo_Error(yytext(),yycolumn,yyline,"Error Lexico","El caracter no pertenece al lenguaje"));
            }
          case 56: break;
          case 2: 
            { System.out.println("numero "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.numero, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 3: 
            { System.out.println("punto"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.punto, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 4: 
            { System.out.println("id "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.identificador, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 5: 
            { System.out.println("div "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.div, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 6: 
            { System.out.println("not"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.pr_not, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 7: 
            { System.out.println("mayor"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.mayor, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 8: 
            { System.out.println("menor"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.menor, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 9: 
            { System.out.println("llave_a"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.llave_a, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 10: 
            { System.out.println("llave_c"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.llave_c, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 11: 
            { System.out.println("par_abierto"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.pr_parA, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 12: 
            { System.out.println("par_cerrado"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.pr_parC, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 13: 
            { System.out.println("p_coma"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.p_coma, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 14: 
            { System.out.println("dos_puntos"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.dos_puntos, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 15: 
            { System.out.println("coma "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.coma, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 16: 
            { System.out.println("mas "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.mas, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 17: 
            { System.out.println("menos "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.menos, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 18: 
            { System.out.println("por "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.por, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 19: 
            { 
            }
          case 74: break;
          case 20: 
            { comentario += yytext();
            }
          case 75: break;
          case 21: 
            { System.out.println("Comentario simple: "+comentario);
                comentario = "";
                yybegin(YYINITIAL);
            }
          case 76: break;
          case 22: 
            { comentario+= yytext();
            }
          case 77: break;
          case 23: 
            { System.out.println("cadena "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.cadena, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 24: 
            { yybegin(COMENTARIO);
            }
          case 79: break;
          case 25: 
            { System.out.println("igual"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.igual, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 26: 
            { System.out.println("diferente"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.diferente, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 27: 
            { System.out.println("mayor_igual"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.mayor_igual, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 28: 
            { System.out.println("menor_igual"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.menor_igual, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 29: 
            { System.out.println("and"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.pr_and, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 30: 
            { System.out.println("or"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.pr_or, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 31: 
            { System.out.println("aumento "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.incremento, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 32: 
            { System.out.println("decremento "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.decremento, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 33: 
            { System.out.println("pr_si "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_si, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 34: 
            { System.out.println("Comentario multi: "+comentario);
                comentario ="";
             yybegin(YYINITIAL);
            }
          case 89: break;
          case 35: 
            { yybegin(MULTI);
            }
          case 90: break;
          case 36: 
            { System.out.println("pr_sino "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_sino, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 37: 
            { System.out.println("pr_para "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_para, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 38: 
            { System.out.println("pr_caso "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_caso, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 39: 
            { System.out.println("pr_dimv "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_dimv, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 40: 
            { System.out.println("pr_true "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_true, yycolumn, yyline, yytext().substring(1,yytext().length() - 1));
            }
          case 95: break;
          case 41: 
            { System.out.println("pr_atexto "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_atexto, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 42: 
            { System.out.println("pr_conteo "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_conteo, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 43: 
            { System.out.println("pr_false "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_false, yycolumn, yyline, yytext().substring(1,yytext().length() - 1));
            }
          case 98: break;
          case 44: 
            { System.out.println("pr_obtener"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_obtener, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 45: 
            { System.out.println("pr_mensaje"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_mensaje, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 46: 
            { System.out.println("pr_funcion  "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_funcion, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 47: 
            { System.out.println("pr_detener"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.pr_detener, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 48: 
            { System.out.println("pr_defecto "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_defecto, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 49: 
            { System.out.println("pr_imprimir  "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_imprimir, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 50: 
            { System.out.println("pr_retornar "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_retornar, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 51: 
            { System.out.println("pr_mientras "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_mientras, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 52: 
            { System.out.println("pr_documento"+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline); return new Symbol(SimbolosCJS.pr_documento, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 53: 
            { System.out.println("pr_selecciona "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_selecciona, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 54: 
            { System.out.println("pr_observador "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_observador, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 55: 
            { System.out.println("pr_setelemento "+ yytext()+" columna: "+ yycolumn +" linea: "+ yyline);return new Symbol(SimbolosCJS.pr_setelemento, yycolumn, yyline, yytext());
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
