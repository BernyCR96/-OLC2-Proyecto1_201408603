
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 02 00:12:57 CST 2018
//----------------------------------------------------

package Analizador_CJS;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.lang.Math;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 02 00:12:57 CST 2018
  */
public class SintacticoCJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoCJS() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\024\005" +
    "\000\002\024\010\000\002\020\004\000\002\020\007\000" +
    "\002\020\004\000\002\025\005\000\002\025\003\000\002" +
    "\014\005\000\002\014\003\000\002\021\012\000\002\021" +
    "\012\000\002\021\010\000\002\021\005\000\002\021\005" +
    "\000\002\021\007\000\002\021\010\000\002\021\007\000" +
    "\002\021\007\000\002\021\010\000\002\021\010\000\002" +
    "\021\005\000\002\021\005\000\002\021\007\000\002\021" +
    "\005\000\002\021\006\000\002\027\006\000\002\026\015" +
    "\000\002\026\006\000\002\006\012\000\002\006\011\000" +
    "\002\006\011\000\002\006\010\000\002\031\004\000\002" +
    "\031\003\000\002\017\011\000\002\017\015\000\002\017" +
    "\011\000\002\032\004\000\002\032\003\000\002\033\006" +
    "\000\002\033\005\000\002\033\005\000\002\033\004\000" +
    "\002\015\006\000\002\023\006\000\002\016\005\000\002" +
    "\011\011\000\002\011\010\000\002\010\017\000\002\010" +
    "\016\000\002\034\003\000\002\034\003\000\002\035\005" +
    "\000\002\013\005\000\002\013\003\000\002\013\005\000" +
    "\002\013\004\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\004\000\002\013\003\000" +
    "\002\013\003\000\002\013\004\000\002\013\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\006\000\002\013\003\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\032\003\026\033\021\035\017\036\023\037" +
    "\004\040\022\041\034\042\030\044\024\050\032\054\016" +
    "\060\036\001\002\000\004\060\313\001\002\000\034\002" +
    "\ufffe\003\ufffe\033\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\041\ufffe\042\ufffe\044\ufffe\050\ufffe\054\ufffe\060\ufffe\001" +
    "\002\000\004\022\312\001\002\000\034\002\ufffd\003\ufffd" +
    "\033\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\044\ufffd\050\ufffd\054\ufffd\060\ufffd\001\002\000\004" +
    "\022\311\001\002\000\042\002\ufff5\003\ufff5\016\ufff5\033" +
    "\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\044\ufff5\050\ufff5\052\ufff5\053\ufff5\054\ufff5\060\ufff5\001" +
    "\002\000\034\002\ufffc\003\ufffc\033\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\044\ufffc\050\ufffc\054" +
    "\ufffc\060\ufffc\001\002\000\004\022\310\001\002\000\042" +
    "\002\ufff6\003\ufff6\016\ufff6\033\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\044\ufff6\050\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\060\ufff6\001\002\000\042\002\ufffa\003" +
    "\ufffa\016\ufffa\033\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\044\ufffa\050\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\060\ufffa\001\002\000\004\017\305\001\002\000\004" +
    "\017\266\001\002\000\034\002\000\003\026\033\021\035" +
    "\017\036\023\037\004\040\022\041\034\042\030\044\024" +
    "\050\032\054\016\060\036\001\002\000\004\017\253\001" +
    "\002\000\004\017\250\001\002\000\004\017\241\001\002" +
    "\000\004\021\231\001\002\000\042\002\ufff8\003\ufff8\016" +
    "\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\044\ufff8\050\ufff8\052\ufff8\053\ufff8\054\ufff8\060" +
    "\ufff8\001\002\000\004\022\230\001\002\000\004\022\227" +
    "\001\002\000\026\014\056\015\043\017\052\026\045\044" +
    "\024\057\047\060\057\061\044\062\055\063\054\001\002" +
    "\000\042\002\ufff9\003\ufff9\016\ufff9\033\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\044\ufff9\050\ufff9" +
    "\052\ufff9\053\ufff9\054\ufff9\060\ufff9\001\002\000\004\017" +
    "\206\001\002\000\004\022\205\001\002\000\004\060\172" +
    "\001\002\000\004\002\170\001\002\000\006\017\042\021" +
    "\041\001\002\000\004\022\040\001\002\000\042\002\ufff1" +
    "\003\ufff1\016\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\044\ufff1\050\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\060\ufff1\001\002\000\012\045\122\046\165\047" +
    "\125\060\161\001\002\000\030\014\056\015\043\017\052" +
    "\020\051\026\045\044\024\057\047\060\057\061\044\062" +
    "\055\063\054\001\002\000\026\014\056\015\043\017\052" +
    "\026\045\044\024\057\047\060\057\061\044\062\055\063" +
    "\054\001\002\000\050\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\012\uffa6\013\uffa6\016\uffa6\020\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\001\002\000\026\014\056\015\043\017" +
    "\052\026\045\044\024\057\047\060\057\061\044\062\055" +
    "\063\054\001\002\000\006\020\151\024\132\001\002\000" +
    "\050\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\016\uffa7\020\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\001\002\000\050\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\016\uffb9\020\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\001\002\000\052\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\016\uffd8\020" +
    "\uffd8\021\121\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\001\002\000\026\014" +
    "\056\015\043\017\052\026\045\044\024\057\047\060\057" +
    "\061\044\062\055\063\054\001\002\000\050\004\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\016\uffa3\020\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\001\002\000\050" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\016\uffab\020\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\001" +
    "\002\000\050\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\016\uffaa\020\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\001\002\000\026\014\056\015\043\017\052\026" +
    "\045\044\024\057\047\060\057\061\044\062\055\063\054" +
    "\001\002\000\056\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\015\113\016\uffa5\017\042" +
    "\020\uffa5\021\041\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\001\002\000\044" +
    "\004\076\005\065\006\064\007\075\010\071\011\067\012" +
    "\062\013\066\016\uffe9\020\uffe9\024\uffe9\025\074\026\063" +
    "\027\073\030\061\031\072\032\070\001\002\000\026\014" +
    "\056\015\043\017\052\026\045\044\024\057\047\060\057" +
    "\061\044\062\055\063\054\001\002\000\026\014\056\015" +
    "\043\017\052\026\045\044\024\057\047\060\057\061\044" +
    "\062\055\063\054\001\002\000\026\014\056\015\043\017" +
    "\052\026\045\044\024\057\047\060\057\061\044\062\055" +
    "\063\054\001\002\000\026\014\056\015\043\017\052\026" +
    "\045\044\024\057\047\060\057\061\044\062\055\063\054" +
    "\001\002\000\026\014\056\015\043\017\052\026\045\044" +
    "\024\057\047\060\057\061\044\062\055\063\054\001\002" +
    "\000\026\014\056\015\043\017\052\026\045\044\024\057" +
    "\047\060\057\061\044\062\055\063\054\001\002\000\026" +
    "\014\056\015\043\017\052\026\045\044\024\057\047\060" +
    "\057\061\044\062\055\063\054\001\002\000\050\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\016\uffac\020\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\001\002\000" +
    "\026\014\056\015\043\017\052\026\045\044\024\057\047" +
    "\060\057\061\044\062\055\063\054\001\002\000\050\004" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\016\uffa9\020\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\001\002" +
    "\000\026\014\056\015\043\017\052\026\045\044\024\057" +
    "\047\060\057\061\044\062\055\063\054\001\002\000\026" +
    "\014\056\015\043\017\052\026\045\044\024\057\047\060" +
    "\057\061\044\062\055\063\054\001\002\000\026\014\056" +
    "\015\043\017\052\026\045\044\024\057\047\060\057\061" +
    "\044\062\055\063\054\001\002\000\026\014\056\015\043" +
    "\017\052\026\045\044\024\057\047\060\057\061\044\062" +
    "\055\063\054\001\002\000\050\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\016\uffb6\020" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\074\026\063\027\073" +
    "\030\061\031\072\032\070\001\002\000\050\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\016\uffb2\020\uffb2\022\uffb2\023\uffb2\024\uffb2\025\074\026" +
    "\063\027\073\030\061\031\072\032\070\001\002\000\050" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\016\uffb0\020\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\073\030\061\031\072\032\070\001" +
    "\002\000\050\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\016\uffae\020\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\072" +
    "\032\070\001\002\000\050\004\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\016\uffb5\020\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\074\026\063\027\073\030" +
    "\061\031\072\032\070\001\002\000\050\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\016" +
    "\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4\025\074\026\063" +
    "\027\073\030\061\031\072\032\070\001\002\000\050\004" +
    "\076\005\065\006\064\007\075\010\071\011\067\012\uffb8" +
    "\013\uffb8\016\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\074\026\063\027\073\030\061\031\072\032\070\001\002" +
    "\000\050\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\016\uffb3\020\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\074\026\063\027\073\030\061\031\072\032" +
    "\070\001\002\000\050\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\016\uffb1\020\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\074\026\063\027\073\030\061" +
    "\031\072\032\070\001\002\000\050\004\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\016\uffaf" +
    "\020\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\073\030\061\031\072\032\070\001\002\000\050\004\076" +
    "\005\065\006\064\007\075\010\071\011\067\012\uffba\013" +
    "\uffba\016\uffba\020\uffba\022\uffba\023\uffba\024\uffba\025\074" +
    "\026\063\027\073\030\061\031\072\032\070\001\002\000" +
    "\050\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad" +
    "\012\uffad\013\uffad\016\uffad\020\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\072\032\070" +
    "\001\002\000\026\014\056\015\043\017\052\026\045\044" +
    "\024\057\047\060\057\061\044\062\055\063\054\001\002" +
    "\000\040\004\076\005\065\006\064\007\075\010\071\011" +
    "\067\012\062\013\066\016\115\025\074\026\063\027\073" +
    "\030\061\031\072\032\070\001\002\000\050\004\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\016\uffa4\020\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\001\002\000\050" +
    "\004\076\005\065\006\064\007\075\010\071\011\067\012" +
    "\uffb7\013\uffb7\016\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\074\026\063\027\073\030\061\031\072\032\070\001" +
    "\002\000\040\004\076\005\065\006\064\007\075\010\071" +
    "\011\067\012\062\013\066\020\120\025\074\026\063\027" +
    "\073\030\061\031\072\032\070\001\002\000\050\004\uffa2" +
    "\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\016\uffa2\020\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\001\002\000" +
    "\010\045\122\047\125\060\123\001\002\000\004\017\134" +
    "\001\002\000\050\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\016\uffe1\020\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\001\002\000\050\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\016\uffde\020" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\001\002\000\004\017\127\001" +
    "\002\000\050\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\016\uffdf\020\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\001\002\000\026\014\056\015\043\017\052\026" +
    "\045\044\024\057\047\060\057\061\044\062\055\063\054" +
    "\001\002\000\006\020\131\024\132\001\002\000\050\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\016\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\001\002" +
    "\000\026\014\056\015\043\017\052\026\045\044\024\057" +
    "\047\060\057\061\044\062\055\063\054\001\002\000\044" +
    "\004\076\005\065\006\064\007\075\010\071\011\067\012" +
    "\062\013\066\016\uffea\020\uffea\024\uffea\025\074\026\063" +
    "\027\073\030\061\031\072\032\070\001\002\000\026\014" +
    "\056\015\043\017\052\026\045\044\024\057\047\060\057" +
    "\061\044\062\055\063\054\001\002\000\006\020\136\024" +
    "\137\001\002\000\050\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\016\uffd4\020\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\001\002\000\030\014\056\015\043\017" +
    "\052\026\045\037\140\044\024\057\047\060\057\061\044" +
    "\062\055\063\054\001\002\000\004\017\141\001\002\000" +
    "\004\020\142\001\002\000\004\015\143\001\002\000\030" +
    "\003\026\033\021\035\017\036\023\040\022\041\034\042" +
    "\030\044\024\050\032\054\016\060\036\001\002\000\036" +
    "\003\uffce\016\uffce\033\uffce\035\uffce\036\uffce\040\uffce\041" +
    "\uffce\042\uffce\044\uffce\050\uffce\052\uffce\053\uffce\054\uffce" +
    "\060\uffce\001\002\000\032\003\026\016\147\033\021\035" +
    "\017\036\023\040\022\041\034\042\030\044\024\050\032" +
    "\054\016\060\036\001\002\000\036\003\uffcf\016\uffcf\033" +
    "\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf" +
    "\050\uffcf\052\uffcf\053\uffcf\054\uffcf\060\uffcf\001\002\000" +
    "\004\020\150\001\002\000\050\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\016\uffd5\020" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\001\002\000\052\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\016\uffd7\020\uffd7\021\152\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\001\002" +
    "\000\010\045\122\047\125\060\153\001\002\000\050\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\016\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\001\002" +
    "\000\050\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\016\uffdd\020\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\001\002\000\050\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\016\uffdc\020\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\001\002\000\050\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\016\uffa8" +
    "\020\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\073\030\061\031\072\032\070\001\002\000\006\016\160" +
    "\024\132\001\002\000\050\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\016\uffbb\020\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\001\002\000\050\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\016" +
    "\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\001\002\000\050\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\016\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\001\002" +
    "\000\050\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\016\uffdb\020\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\001\002\000\050\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\013\uffda\016\uffda\020\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\001\002\000\004\017\166\001\002\000" +
    "\004\020\167\001\002\000\050\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\016\uffd9\020" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\001\002\000\004\002\001\001" +
    "\002\000\004\022\uffeb\001\002\000\012\015\177\022\uffe7" +
    "\023\176\024\uffe7\001\002\000\006\022\uffed\024\174\001" +
    "\002\000\004\060\175\001\002\000\010\020\uffe8\022\uffe8" +
    "\024\uffe8\001\002\000\026\014\056\015\043\017\052\026" +
    "\045\044\024\057\047\060\057\061\044\062\055\063\054" +
    "\001\002\000\026\014\056\015\043\017\052\026\045\044" +
    "\024\057\047\060\057\061\044\062\055\063\054\001\002" +
    "\000\040\004\076\005\065\006\064\007\075\010\071\011" +
    "\067\012\062\013\066\016\201\025\074\026\063\027\073" +
    "\030\061\031\072\032\070\001\002\000\006\022\uffec\023" +
    "\202\001\002\000\026\014\056\015\043\017\052\026\045" +
    "\044\024\057\047\060\057\061\044\062\055\063\054\001" +
    "\002\000\040\004\076\005\065\006\064\007\075\010\071" +
    "\011\067\012\062\013\066\022\uffee\025\074\026\063\027" +
    "\073\030\061\031\072\032\070\001\002\000\040\004\076" +
    "\005\065\006\064\007\075\010\071\011\067\012\062\013" +
    "\066\022\uffef\025\074\026\063\027\073\030\061\031\072" +
    "\032\070\001\002\000\042\002\ufffb\003\ufffb\016\ufffb\033" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\044\ufffb\050\ufffb\052\ufffb\053\ufffb\054\ufffb\060\ufffb\001" +
    "\002\000\026\014\056\015\043\017\052\026\045\044\024" +
    "\057\047\060\057\061\044\062\055\063\054\001\002\000" +
    "\040\004\076\005\065\006\064\007\075\010\071\011\067" +
    "\012\062\013\066\020\210\025\074\026\063\027\073\030" +
    "\061\031\072\032\070\001\002\000\004\015\211\001\002" +
    "\000\006\052\214\053\213\001\002\000\010\016\223\052" +
    "\214\053\213\001\002\000\004\023\221\001\002\000\026" +
    "\014\056\015\043\017\052\026\045\044\024\057\047\060" +
    "\057\061\044\062\055\063\054\001\002\000\010\016\uffc9" +
    "\052\uffc9\053\uffc9\001\002\000\040\004\076\005\065\006" +
    "\064\007\075\010\071\011\067\012\062\013\066\023\217" +
    "\025\074\026\063\027\073\030\061\031\072\032\070\001" +
    "\002\000\036\003\026\016\uffc6\033\021\035\017\036\023" +
    "\040\022\041\034\042\030\044\024\050\032\052\uffc6\053" +
    "\uffc6\054\016\060\036\001\002\000\036\003\026\016\uffc8" +
    "\033\021\035\017\036\023\040\022\041\034\042\030\044" +
    "\024\050\032\052\uffc8\053\uffc8\054\016\060\036\001\002" +
    "\000\036\003\026\016\uffc5\033\021\035\017\036\023\040" +
    "\022\041\034\042\030\044\024\050\032\052\uffc5\053\uffc5" +
    "\054\016\060\036\001\002\000\036\003\026\016\uffc7\033" +
    "\021\035\017\036\023\040\022\041\034\042\030\044\024" +
    "\050\032\052\uffc7\053\uffc7\054\016\060\036\001\002\000" +
    "\042\002\uffcb\003\uffcb\016\uffcb\033\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\044\uffcb\050\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\060\uffcb\001\002\000\010\016\uffca" +
    "\052\uffca\053\uffca\001\002\000\040\004\076\005\065\006" +
    "\064\007\075\010\071\011\067\012\062\013\066\022\226" +
    "\025\074\026\063\027\073\030\061\031\072\032\070\001" +
    "\002\000\042\002\uffc2\003\uffc2\016\uffc2\033\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2\050" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\060\uffc2\001\002\000\042" +
    "\002\ufff2\003\ufff2\016\ufff2\033\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\044\ufff2\050\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\060\ufff2\001\002\000\042\002\ufff0\003" +
    "\ufff0\016\ufff0\033\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\044\ufff0\050\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\060\ufff0\001\002\000\004\055\232\001\002\000\004" +
    "\017\233\001\002\000\026\014\056\015\043\017\052\026" +
    "\045\044\024\057\047\060\057\061\044\062\055\063\054" +
    "\001\002\000\040\004\076\005\065\006\064\007\075\010" +
    "\071\011\067\012\062\013\066\020\235\025\074\026\063" +
    "\027\073\030\061\031\072\032\070\001\002\000\052\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\016\uffe4\020\uffe4\021\236\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\001\002\000\006\045\122\047\125\001\002\000\050\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\016\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\001\002" +
    "\000\050\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\016\uffe5\020\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\001\002\000\026\014\056\015\043\017\052\026\045" +
    "\044\024\057\047\060\057\061\044\062\055\063\054\001" +
    "\002\000\040\004\076\005\065\006\064\007\075\010\071" +
    "\011\067\012\062\013\066\020\243\025\074\026\063\027" +
    "\073\030\061\031\072\032\070\001\002\000\004\015\244" +
    "\001\002\000\032\003\026\016\245\033\021\035\017\036" +
    "\023\040\022\041\034\042\030\044\024\050\032\054\016" +
    "\060\036\001\002\000\042\002\uffc0\003\uffc0\016\uffc0\033" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\044\uffc0\050\uffc0\052\uffc0\053\uffc0\054\uffc0\060\uffc0\001" +
    "\002\000\032\003\026\016\247\033\021\035\017\036\023" +
    "\040\022\041\034\042\030\044\024\050\032\054\016\060" +
    "\036\001\002\000\042\002\uffc1\003\uffc1\016\uffc1\033\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\044" +
    "\uffc1\050\uffc1\052\uffc1\053\uffc1\054\uffc1\060\uffc1\001\002" +
    "\000\026\014\056\015\043\017\052\026\045\044\024\057" +
    "\047\060\057\061\044\062\055\063\054\001\002\000\040" +
    "\004\076\005\065\006\064\007\075\010\071\011\067\012" +
    "\062\013\066\020\252\025\074\026\063\027\073\030\061" +
    "\031\072\032\070\001\002\000\004\022\uffc4\001\002\000" +
    "\026\014\056\015\043\017\052\026\045\044\024\057\047" +
    "\060\057\061\044\062\055\063\054\001\002\000\040\004" +
    "\076\005\065\006\064\007\075\010\071\011\067\012\062" +
    "\013\066\020\255\025\074\026\063\027\073\030\061\031" +
    "\072\032\070\001\002\000\004\015\256\001\002\000\030" +
    "\003\026\033\021\035\017\036\023\040\022\041\034\042" +
    "\030\044\024\050\032\054\016\060\036\001\002\000\032" +
    "\003\026\016\260\033\021\035\017\036\023\040\022\041" +
    "\034\042\030\044\024\050\032\054\016\060\036\001\002" +
    "\000\044\002\uffcd\003\uffcd\016\uffcd\033\uffcd\034\261\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd" +
    "\050\uffcd\052\uffcd\053\uffcd\054\uffcd\060\uffcd\001\002\000" +
    "\004\015\262\001\002\000\030\003\026\033\021\035\017" +
    "\036\023\040\022\041\034\042\030\044\024\050\032\054" +
    "\016\060\036\001\002\000\032\003\026\016\264\033\021" +
    "\035\017\036\023\040\022\041\034\042\030\044\024\050" +
    "\032\054\016\060\036\001\002\000\042\002\uffcc\003\uffcc" +
    "\016\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\044\uffcc\050\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\060\uffcc\001\002\000\034\002\uffff\003\uffff\033\uffff\035" +
    "\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\044\uffff" +
    "\050\uffff\054\uffff\060\uffff\001\002\000\004\060\267\001" +
    "\002\000\004\023\270\001\002\000\026\014\056\015\043" +
    "\017\052\026\045\044\024\057\047\060\057\061\044\062" +
    "\055\063\054\001\002\000\040\004\076\005\065\006\064" +
    "\007\075\010\071\011\067\012\062\013\066\022\272\025" +
    "\074\026\063\027\073\030\061\031\072\032\070\001\002" +
    "\000\026\014\056\015\043\017\052\026\045\044\024\057" +
    "\047\060\057\061\044\062\055\063\054\001\002\000\040" +
    "\004\076\005\065\006\064\007\075\010\071\011\067\012" +
    "\062\013\066\022\274\025\074\026\063\027\073\030\061" +
    "\031\072\032\070\001\002\000\006\031\276\032\275\001" +
    "\002\000\004\020\uffbd\001\002\000\004\020\uffbc\001\002" +
    "\000\004\020\300\001\002\000\004\015\301\001\002\000" +
    "\032\003\026\016\302\033\021\035\017\036\023\040\022" +
    "\041\034\042\030\044\024\050\032\054\016\060\036\001" +
    "\002\000\042\002\uffbe\003\uffbe\016\uffbe\033\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\044\uffbe\050" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\060\uffbe\001\002\000\032" +
    "\003\026\016\304\033\021\035\017\036\023\040\022\041" +
    "\034\042\030\044\024\050\032\054\016\060\036\001\002" +
    "\000\042\002\uffbf\003\uffbf\016\uffbf\033\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\050\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\060\uffbf\001\002\000\026\014" +
    "\056\015\043\017\052\026\045\044\024\057\047\060\057" +
    "\061\044\062\055\063\054\001\002\000\040\004\076\005" +
    "\065\006\064\007\075\010\071\011\067\012\062\013\066" +
    "\020\307\025\074\026\063\027\073\030\061\031\072\032" +
    "\070\001\002\000\004\022\uffc3\001\002\000\042\002\ufff7" +
    "\003\ufff7\016\ufff7\033\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\044\ufff7\050\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\060\ufff7\001\002\000\042\002\ufff4\003\ufff4\016" +
    "\ufff4\033\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\044\ufff4\050\ufff4\052\ufff4\053\ufff4\054\ufff4\060" +
    "\ufff4\001\002\000\042\002\ufff3\003\ufff3\016\ufff3\033\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\044" +
    "\ufff3\050\ufff3\052\ufff3\053\ufff3\054\ufff3\060\ufff3\001\002" +
    "\000\004\017\314\001\002\000\006\020\315\060\316\001" +
    "\002\000\004\015\325\001\002\000\006\020\uffe7\024\uffe7" +
    "\001\002\000\006\020\320\024\174\001\002\000\004\015" +
    "\321\001\002\000\032\003\026\016\322\033\021\035\017" +
    "\036\023\040\022\041\034\042\030\044\024\050\032\054" +
    "\016\060\036\001\002\000\034\002\uffd2\003\uffd2\033\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044" +
    "\uffd2\050\uffd2\054\uffd2\060\uffd2\001\002\000\032\003\026" +
    "\016\324\033\021\035\017\036\023\040\022\041\034\042" +
    "\030\044\024\050\032\054\016\060\036\001\002\000\034" +
    "\002\uffd3\003\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\044\uffd3\050\uffd3\054\uffd3\060\uffd3" +
    "\001\002\000\032\003\026\016\326\033\021\035\017\036" +
    "\023\040\022\041\034\042\030\044\024\050\032\054\016" +
    "\060\036\001\002\000\034\002\uffd0\003\uffd0\033\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0" +
    "\050\uffd0\054\uffd0\060\uffd0\001\002\000\032\003\026\016" +
    "\330\033\021\035\017\036\023\040\022\041\034\042\030" +
    "\044\024\050\032\054\016\060\036\001\002\000\034\002" +
    "\uffd1\003\uffd1\033\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\044\uffd1\050\uffd1\054\uffd1\060\uffd1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\042\002\034\003\017\004\004\005\006\006" +
    "\011\007\032\010\014\011\030\012\024\015\012\016\013" +
    "\017\010\020\007\021\005\022\026\023\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\264\005" +
    "\006\006\011\007\032\010\014\011\030\012\024\015\012" +
    "\016\013\017\010\020\007\021\005\022\026\023\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\224\021\052\035\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\172\024\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\163\027\162\030\161\001\001\000\012\013\057\021\052" +
    "\025\045\035\047\001\001\000\012\013\057\021\052\025" +
    "\156\035\047\001\001\000\002\001\001\000\010\013\155" +
    "\021\052\035\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\116" +
    "\021\052\035\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\115\021\052\035\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\111\021\052\035\047\001\001\000\010\013\110\021\052" +
    "\035\047\001\001\000\010\013\107\021\052\035\047\001" +
    "\001\000\010\013\106\021\052\035\047\001\001\000\010" +
    "\013\105\021\052\035\047\001\001\000\010\013\104\021" +
    "\052\035\047\001\001\000\010\013\103\021\052\035\047" +
    "\001\001\000\002\001\001\000\010\013\102\021\052\035" +
    "\047\001\001\000\002\001\001\000\010\013\101\021\052" +
    "\035\047\001\001\000\010\013\100\021\052\035\047\001" +
    "\001\000\010\013\077\021\052\035\047\001\001\000\010" +
    "\013\076\021\052\035\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\113\021\052\035\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\123\027" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\057\021\052\025\127\035\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\132\021\052\035\047\001" +
    "\001\000\002\001\001\000\012\013\057\021\052\025\134" +
    "\035\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\132\021\052\035\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\143\007" +
    "\032\010\014\011\030\012\024\015\012\016\013\017\010" +
    "\020\007\021\005\022\026\023\036\031\144\001\001\000" +
    "\002\001\001\000\032\005\145\007\032\010\014\011\030" +
    "\012\024\015\012\016\013\017\010\020\007\021\005\022" +
    "\026\023\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\154\027" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\203\021\052\035\047\001\001\000\010" +
    "\013\177\021\052\035\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\202\021\052\035\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\206\021\052\035\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\211\033\214\001\001\000" +
    "\004\033\223\001\001\000\002\001\001\000\010\013\215" +
    "\021\052\035\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\143\007\032\010\014\011\030\012\024" +
    "\015\012\016\013\017\010\020\007\021\005\022\026\023" +
    "\036\031\217\001\001\000\032\005\145\007\032\010\014" +
    "\011\030\012\024\015\012\016\013\017\010\020\007\021" +
    "\005\022\026\023\036\001\001\000\034\005\143\007\032" +
    "\010\014\011\030\012\024\015\012\016\013\017\010\020" +
    "\007\021\005\022\026\023\036\031\221\001\001\000\032" +
    "\005\145\007\032\010\014\011\030\012\024\015\012\016" +
    "\013\017\010\020\007\021\005\022\026\023\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\233\021\052\035" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\236\027\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\241\021\052\035\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\143\007\032\010" +
    "\014\011\030\012\024\015\012\016\013\017\010\020\007" +
    "\021\005\022\026\023\036\031\245\001\001\000\002\001" +
    "\001\000\032\005\145\007\032\010\014\011\030\012\024" +
    "\015\012\016\013\017\010\020\007\021\005\022\026\023" +
    "\036\001\001\000\002\001\001\000\010\013\250\021\052" +
    "\035\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\253\021\052\035\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\143\007\032\010\014\011" +
    "\030\012\024\015\012\016\013\017\010\020\007\021\005" +
    "\022\026\023\036\031\256\001\001\000\032\005\145\007" +
    "\032\010\014\011\030\012\024\015\012\016\013\017\010" +
    "\020\007\021\005\022\026\023\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\143\007\032\010\014" +
    "\011\030\012\024\015\012\016\013\017\010\020\007\021" +
    "\005\022\026\023\036\031\262\001\001\000\032\005\145" +
    "\007\032\010\014\011\030\012\024\015\012\016\013\017" +
    "\010\020\007\021\005\022\026\023\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\270\021\052\035\047\001\001\000\002" +
    "\001\001\000\010\013\272\021\052\035\047\001\001\000" +
    "\002\001\001\000\004\034\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\143\007\032\010\014\011\030\012\024\015\012" +
    "\016\013\017\010\020\007\021\005\022\026\023\036\031" +
    "\302\001\001\000\002\001\001\000\032\005\145\007\032" +
    "\010\014\011\030\012\024\015\012\016\013\017\010\020" +
    "\007\021\005\022\026\023\036\001\001\000\002\001\001" +
    "\000\010\013\305\021\052\035\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\143\007\032\010\014\011" +
    "\030\012\024\015\012\016\013\017\010\020\007\021\005" +
    "\022\026\023\036\031\322\001\001\000\002\001\001\000" +
    "\032\005\145\007\032\010\014\011\030\012\024\015\012" +
    "\016\013\017\010\020\007\021\005\022\026\023\036\001" +
    "\001\000\002\001\001\000\034\005\143\007\032\010\014" +
    "\011\030\012\024\015\012\016\013\017\010\020\007\021" +
    "\005\022\026\023\036\031\326\001\001\000\002\001\001" +
    "\000\032\005\145\007\032\010\014\011\030\012\024\015" +
    "\012\016\013\017\010\020\007\021\005\022\026\023\036" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    
    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);       
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }   
  
    public void escribir_fichero(String texto, String nombre) throws IOException {
        String ruta = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";
        File archivo = new File(ruta);
        BufferedWriter bw;
        if (archivo.createNewFile()) {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        }
        bw.close();

    }
    public int contador = 0;

    public void grafico(String nombre) {
        try {

            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            String fileInputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";

            String fileOutputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".jpg";
            String tParam = "-Tjpg";
            String tOParam = "-o";
            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;
            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }  

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoCJS$actions {







  private final SintacticoCJS parser;

  /** Constructor */
  CUP$SintacticoCJS$actions(SintacticoCJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoCJS$do_action(
    int                        CUP$SintacticoCJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCJS$parser,
    java.util.Stack            CUP$SintacticoCJS$stack,
    int                        CUP$SintacticoCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= pr_parA E pr_parC 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                    RESULT = new NodoAST("EXPRESION","E");
                    RESULT.getLhijo().add(e);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= EVENTO 
            {
              NodoAST RESULT =null;
		int eventoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int eventoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST evento = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= identificador llave_a E llave_c 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                    RESULT = new NodoAST("IDENTIFICADOR", id);
                    RESULT.getLhijo().add(e);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= identificador 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("IDENTIFICADOR", id);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= cadena 
            {
              NodoAST RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("CADEMA", cad);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= numero 
            {
              NodoAST RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		

                    RESULT = new NodoAST("NUMERICO", num);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= menos E 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST ex = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("NEGATIVO", "-");
                      RESULT.getLhijo().add(ex);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E decremento 
            {
              NodoAST RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST val = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                    RESULT = new NodoAST("DECREMENTO","--");
                    RESULT.getLhijo().add(val);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= pr_true 
            {
              NodoAST RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("TRUE",val);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= pr_false 
            {
              NodoAST RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("FALSE",val);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E incremento 
            {
              NodoAST RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST val = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                    RESULT = new NodoAST("INCREMENTO","++");
                    RESULT.getLhijo().add(val);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E div E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("DIVISION", "/");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E por E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("MULT", "*");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E menos E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("RESTA", "-");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E mas E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("SUMA", "+");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E menor E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("MENORQUE", "<");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E mayor E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("MAYORQUE", ">");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E diferente E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("DIFERENTE", "!=");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E menor_igual E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("MENORIGUAL", "<=");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E mayor_igual E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("MAYORIGUAL", ">=");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E igual E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("IGUAL", "=");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= pr_not E 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("NOT", "!");
                    RESULT.getLhijo().add(e);
                    
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E pr_or E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("OR", "||");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= ARREGLO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("ARREGLO", "arreglo");
                    RESULT.getLhijo().add(a);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E pr_and E 
            {
              NodoAST RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST val2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    
                    RESULT = new NodoAST("AND", "&&");
                    RESULT.getLhijo().add(val1);
                    RESULT.getLhijo().add(val2);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARREGLO ::= llave_a L_EXP llave_c 
            {
              NodoAST RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST le = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                    RESULT = le;
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARREGLO",27, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADOR ::= decremento 
            {
              NodoAST RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPERADOR",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADOR ::= incremento 
            {
              NodoAST RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPERADOR",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARA ::= pr_para pr_parA identificador dos_puntos E p_coma E p_coma OPERADOR pr_parC llave_a llave_c 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		NodoAST op = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARA",6, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARA ::= pr_para pr_parA identificador dos_puntos E p_coma E p_coma OPERADOR pr_parC llave_a L_SENTENCIA llave_c 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		NodoAST op = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST l_sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARA",6, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MIENTRAS ::= pr_mientras pr_parA E pr_parC llave_a llave_c 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MIENTRAS",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MIENTRAS ::= pr_mientras pr_parA E pr_parC llave_a L_SENTENCIA llave_c 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST l_sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MIENTRAS",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RETORNO ::= pr_retornar E p_coma 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RETORNO",12, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MENSAJE ::= pr_mensaje pr_parA E pr_parC 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MENSAJE",17, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IMPRIMIR ::= pr_imprimir pr_parA E pr_parC 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",11, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASO ::= pr_defecto dos_puntos 
            {
              NodoAST RESULT =null;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASO ::= pr_caso E dos_puntos 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASO ::= pr_defecto dos_puntos L_SENTENCIA 
            {
              NodoAST RESULT =null;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST l_sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASO ::= pr_caso E dos_puntos L_SENTENCIA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST l_sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUERPO_SELE ::= CASO 
            {
              NodoAST RESULT =null;
		int casleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST cas = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CUERPO_SELE",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPO_SELE ::= CUERPO_SELE CASO 
            {
              NodoAST RESULT =null;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST lcaso = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST cas = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CUERPO_SELE",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SELECCIONA ::= pr_selecciona pr_parA E pr_parC llave_a CUERPO_SELE llave_c 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST lcaso = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SELECCIONA",13, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SELECCIONA ::= pr_si pr_parA E pr_parC llave_a L_SENTENCIA llave_c pr_sino llave_a L_SENTENCIA llave_c 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		NodoAST l_sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int l_sen2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int l_sen2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST l_sen2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SELECCIONA",13, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SELECCIONA ::= pr_si pr_parA E pr_parC llave_a L_SENTENCIA llave_c 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST l_sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SELECCIONA",13, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L_SENTENCIA ::= SENTENCIA 
            {
              NodoAST RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L_SENTENCIA ::= L_SENTENCIA SENTENCIA 
            {
              NodoAST RESULT =null;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST l_sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCIONES ::= pr_funcion identificador pr_parA pr_parC llave_a llave_c 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCIONES ::= pr_funcion identificador pr_parA pr_parC llave_a L_SENTENCIA llave_c 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST l_sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCIONES ::= pr_funcion identificador pr_parA L_ID pr_parC llave_a llave_c 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		NodoAST lid = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCIONES ::= pr_funcion identificador pr_parA L_ID pr_parC llave_a L_SENTENCIA llave_c 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		NodoAST lid = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST l_sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OBSERVADOR ::= pr_observador pr_parA L_EXP pr_parC 
            {
              NodoAST RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST le = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OBSERVADOR",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OBSERVADOR ::= pr_observador pr_parA L_EXP coma pr_funcion pr_parA pr_parC llave_a L_SENTENCIA llave_c pr_parC 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST l_sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OBSERVADOR",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AGREGAR ::= pr_setelemento pr_parA L_EXP pr_parC 
            {
              NodoAST RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST le = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("AGREGAR",21, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EVENTO ::= identificador pr_parA L_EXP pr_parC 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST le = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EVENTO ::= identificador pr_parA pr_parC 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EVENTO ::= identificador punto pr_atexto pr_parA pr_parC 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EVENTO ::= identificador punto OBSERVADOR 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int obsleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int obsright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST obs = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EVENTO ::= identificador punto AGREGAR 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST set = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EVENTO ::= identificador pr_parA L_EXP pr_parC punto OBSERVADOR 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		NodoAST le = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int obsleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int obsright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST obs = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EVENTO ::= identificador pr_parA L_EXP pr_parC punto AGREGAR 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		NodoAST le = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int agleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int agright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST ag = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EVENTO ::= identificador pr_parA pr_parC punto OBSERVADOR 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int obsleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int obsright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST obs = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EVENTO ::= identificador pr_parA pr_parC punto AGREGAR 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST set = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EVENTO ::= identificador pr_parA L_EXP pr_parC punto identificador 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		NodoAST le = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EVENTO ::= identificador pr_parA pr_parC punto identificador 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EVENTO ::= identificador punto identificador 
            {
              NodoAST RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EVENTO ::= identificador punto CONTEO 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EVENTO ::= pr_documento punto pr_obtener pr_parA E pr_parC 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EVENTO ::= pr_documento punto pr_obtener pr_parA E pr_parC punto AGREGAR 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST set = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EVENTO ::= pr_documento punto pr_obtener pr_parA E pr_parC punto OBSERVADOR 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int obsleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int obsright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST obs = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("EVENTO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_ID ::= identificador 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("L_ID", "");
                    RESULT.getLhijo().add(new NodoAST("IDENTIFICADOR", id));
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_ID",10, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_ID ::= L_ID coma identificador 
            {
              NodoAST RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST val = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                RESULT = val;
                RESULT.getLhijo().add(new NodoAST("IDENTIFICADOR", id));
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_ID",10, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L_EXP ::= E 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                    RESULT = new NodoAST("L_EXPRESIONES","");
                    RESULT.getLhijo().add(e);
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_EXP",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L_EXP ::= L_EXP coma E 
            {
              NodoAST RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		NodoAST le = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                RESULT = le;
                RESULT.getLhijo().add(e);

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_EXP",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= pr_dimv ASIGNACION 
            {
              NodoAST RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST asig = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= pr_dimv identificador llave_a E llave_c 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		

                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= pr_dimv L_ID 
            {
              NodoAST RESULT =null;
		

        
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACION ::= identificador llave_a E llave_c dos_puntos E 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST e2 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACION ::= identificador dos_puntos E 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= error p_coma 
            {
              NodoAST RESULT =null;
		int errorleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int errorright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object error = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= MENSAJE p_coma 
            {
              NodoAST RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST ms = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DETENER p_coma 
            {
              NodoAST RESULT =null;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= EVENTO p_coma 
            {
              NodoAST RESULT =null;
		int llamleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST llam = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DECLARACION p_coma 
            {
              NodoAST RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST dec = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SELECCIONA 
            {
              NodoAST RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST sw = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= RETORNO 
            {
              NodoAST RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST ret = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IMPRIMIR p_coma 
            {
              NodoAST RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST val = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SI 
            {
              NodoAST RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST si = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= MIENTRAS 
            {
              NodoAST RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST wh = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= PARA 
            {
              NodoAST RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST para = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ASIG p_coma 
            {
              NodoAST RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST asig = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= FUNCIONES 
            {
              NodoAST RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST fun = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= SENTENCIA 
            {
              NodoAST RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST sen = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CJS ::= CUERPO 
            {
              NodoAST RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST n1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CJS",1, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CJS ::= CJS CUERPO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST n1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
                
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CJS",1, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CJS 
            {
              NodoAST RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		NodoAST n1 = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
            
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		NodoAST start_val = (NodoAST)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCJS$parser.done_parsing();
          return CUP$SintacticoCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

